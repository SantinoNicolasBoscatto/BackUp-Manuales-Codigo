private async Task ActualizarTablaPilotoYTablaManofactura(Carrera item, Calendario calendario, Dictionary<int, bool> dicMarcas)
{
    item.Id = calendario.EventoActual;
    var piloto = await negocio.Pilotos.Include(x => x.Auto).FirstAsync(x => x.Numero == item.Numero && x.EnActivo == true);
    var posicion = await negocio.TablaPosicionesCampeonatoRegular.FirstAsync(x => x.PilotoId == piloto.Id);

    if (item.Finish == 1)
    {
        piloto.CarrerasGanadas += 1;
        posicion.Wins += 1;
    }
    if (item.Finish <= 5)
    {
        piloto.Top5s += 1;
        posicion.Top5s += 1;
    }
    if (item.Finish <= 10)
    {
        piloto.Top10s += 1;
        posicion.Top10s += 1;
    }
    if (item.Start == 1)
    {
        piloto.Poles += 1;
        posicion.Poles += 1;
    }
    if (item.Status != "Running")
    {
        posicion.DNF += 1;
    }
    posicion.LapsLead += item.Led;
    posicion.Puntos += item.Puntos;
    if (dicMarcas.ContainsKey(piloto.Auto.MarcaId) && dicMarcas[piloto.Auto.MarcaId])
    {
        var manofactura = await negocio.TablaPosicionesManofactura
            .FirstAsync(x => x.MarcaId == piloto.Auto.MarcaId);
        manofactura.Puntos += posicion.Puntos;
        dicMarcas[piloto.Auto.MarcaId] = false;
    }
}
private async Task ActualizarTablaPilotoPlayoff(Carrera item, Calendario calendario)
{
    var piloto = await negocio.Pilotos.Include(x => x.Auto).FirstAsync(x => x.Numero == item.Numero && x.EnActivo == true);
    var posicionPlayOff = await negocio.TablaPosicionesPlayoff.FirstAsync(x => x.PilotoId == piloto.Id);

    if (calendario.EventoActual < 27)
    {
        switch (item.Finish)
        {
            case 1:
                posicionPlayOff.PuntosPlayoff = 15;
                posicionPlayOff.Clasificado16avos = true;
                break;
            case 2:
                posicionPlayOff.PuntosPlayoff = 10;
                break;
            case 3:
                posicionPlayOff.PuntosPlayoff = 8;
                break;
            case 4:
                posicionPlayOff.PuntosPlayoff = 7;
                break;
            case 5:
                posicionPlayOff.PuntosPlayoff = 6;
                break;
            case 6:
                posicionPlayOff.PuntosPlayoff = 5;
                break;
            case 7:
                posicionPlayOff.PuntosPlayoff = 4;
                break;
            case 8:
                posicionPlayOff.PuntosPlayoff = 3;
                break;
            case 9:
                posicionPlayOff.PuntosPlayoff = 2;
                break;
            case 10:
                posicionPlayOff.PuntosPlayoff = 1;
                break;
            default:
                break;
        }

        if (calendario.EventoActual == 26)
        {
            var count = await negocio.TablaPosicionesPlayoff.Where(x => x.Clasificado16avos == true).CountAsync();
            var pilotos = await negocio.TablaPosicionesPlayoff
            .Where(x => x.Clasificado16avos == false).OrderByDescending(x => x.Regular.Puntos).Take(16 - count).ToListAsync();
            foreach (var p in pilotos)
            {
                p.Clasificado16avos = true;
            }
            var clasificados = await negocio.TablaPosicionesPlayoff.Include(x => x.Regular)
                .Where(x => x.Clasificado16avos == true).ToListAsync();
            foreach (var c in clasificados)
            {
                c.PuntosPlayoff = 2000 + posicionPlayOff.PuntosPlayoff;
                c.Regular.Puntos = c.PuntosPlayoff;
            }
        }
    }
    else if (calendario.EventoActual >= 27 && calendario.EventoActual <= 29 && posicionPlayOff.Clasificado16avos)
    {
        if (item.Finish == 1)
        {
            posicionPlayOff.Clasificado12avos = true;
        }
        if (calendario.EventoActual == 29)
        {
            var count = await negocio.TablaPosicionesPlayoff.Where(x => x.Clasificado12avos == true).CountAsync();
            var pilotos = await negocio.TablaPosicionesPlayoff
           .Where(x => x.Clasificado12avos == false).OrderByDescending(x => x.PuntosPlayoff).Take(12 - count).ToListAsync();
            foreach (var p in pilotos)
            {
                p.Clasificado12avos = true;
            }
            var clasificados = await negocio.TablaPosicionesPlayoff.Include(x => x.Regular)
                .Where(x => x.Clasificado12avos == true).ToListAsync();
            foreach (var c in clasificados)
            {
                c.PuntosPlayoff = 3000;
                c.Regular.Puntos = c.PuntosPlayoff;
            }
        }
    }
    else if (calendario.EventoActual >= 30 && calendario.EventoActual <= 32 && posicionPlayOff.Clasificado12avos)
    {
        if (item.Finish == 1) posicionPlayOff.Clasificado8avos = true;
        if (calendario.EventoActual == 32)
        {
            var count = await negocio.TablaPosicionesPlayoff.Where(x => x.Clasificado8avos == true).CountAsync();
            var pilotos = await negocio.TablaPosicionesPlayoff
           .Where(x => x.Clasificado8avos == false).OrderByDescending(x => x.PuntosPlayoff).Take(8 - count).ToListAsync();
            foreach (var p in pilotos)
            {
                p.Clasificado8avos = true;
            }

            var clasificados = await negocio.TablaPosicionesPlayoff.Include(x => x.Regular)
                .Where(x => x.Clasificado8avos == true).ToListAsync();
            foreach (var c in clasificados)
            {
                c.PuntosPlayoff = 4000;
                c.Regular.Puntos = c.PuntosPlayoff;
            }
        }

    }
    else if (calendario.EventoActual >= 33 && calendario.EventoActual <= 35 && posicionPlayOff.Clasificado8avos)
    {
        if (item.Finish == 1) posicionPlayOff.ClasificadoFinal4 = true;
        if (calendario.EventoActual == 33) posicionPlayOff.PuntosPlayoff = 4000;

        if (calendario.EventoActual == 35)
        {
            var count = await negocio.TablaPosicionesPlayoff.Where(x => x.ClasificadoFinal4 == true).CountAsync();
            var pilotos = await negocio.TablaPosicionesPlayoff
           .Where(x => x.ClasificadoFinal4 == false).OrderByDescending(x => x.PuntosPlayoff).Take(4 - count).ToListAsync();
            foreach (var p in pilotos)
            {
                p.ClasificadoFinal4 = true;
            }
            var clasificados = await negocio.TablaPosicionesPlayoff.Include(x => x.Regular)
                .Where(x => x.Clasificado8avos == true).ToListAsync();
            foreach (var c in clasificados)
            {
                c.PuntosPlayoff = 5000;
                c.Regular.Puntos = c.PuntosPlayoff;
            }
        }

    }
}