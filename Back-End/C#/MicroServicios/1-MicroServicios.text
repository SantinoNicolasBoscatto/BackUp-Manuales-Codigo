1) Arquitectura de Software: En terminos simples es la forma en la que se organizan y se comunican los componentes de un Software y las 
responsabilidades que cumple cada uno.

2) Servicio: es una pieza de Software que provee una funcionalidad especifica. En el caso del desarrollo web las Apis vienen a ser 
servicios Web, es decir cada API nos provee una serie de funcionalidades especificas.

3) Microservicios: Son simplemente servicios peque√±os con una funcion super especifica, en vez de tener un servicio monolito en el cual 
desarrollo el negocio y logica de todas mis entidades, lo que hacemos es crear un microservicio por cada entidad. Si la llevamos al ejemplo
de la Nascar-API, una forma de implementar esto seria que cada entidad del negocio tuviera su propio servicio de consumo.

Los problemas de los monolitos que resuelven los microservicios son: 1) Alta Demanda, es decir soportar muchos usuarios a la vez sin perdida
de rendimiento. 2) Alta Disponibilidad, Ante la gran demanda evitar la caida del servicio. Rastraer que parte produce la caida de la pagina 
con monolitos se puede hacer muy dificil, con Microservicios esto es mucho mas facil. 3) Alta Complejidad, al estar aislados los Microservicios
entre si, son mucho mas faciles de extender y escalar.


3.1) Composicion de un Microservicios: 1) Controller, la capa mas externa, esta recibira peticiones y devolvera una respuesta. 
2) Validator, esta capa se encarga de revisar los datos y formatos de la peticion, para verificar que estos sean correctos y 
poder devolver la respuesta. 3) Microservicio: En esta capa estara la logica del negocio (Entities y Use Cases) y el acceso 
a la data de una BD

3.2) Reglas de un Microservicio: 1) Cumplir una sola funcion. 2) Ser Autonomo, es decir no dependan de otros MS para funcionar 
garantizando el desacoplamiento. 3) Estar Aislados, deben correr en entornos separados y cada uno con su propia BD.


4) API Gateway: uno de los retos de los microservicios es gestionar la cantidad de endpoints de cada MS. Para esto usamos una API Gateway, un 
enrutador, donde administra los endpoints internamente y expone hacia afuera un unico Endpoint para consumo.


5) Serverless: 1) Con esta forma de trabajo no deberemos administrar servidores, el proveedor de nube asigna los recursos necesarios 
de forma automatica. 2) No tienes el servidor encendido, sino que el proveedor de nube se encarga automaticamente de prender el 
servidor cuando se ejecuta la aplicacion y luego los apaga.