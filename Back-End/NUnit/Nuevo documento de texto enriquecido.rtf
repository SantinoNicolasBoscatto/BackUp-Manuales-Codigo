
                                                    1) Pruebas Unitarias y UnitTesting

1) Pruebas Unitarias: Prueba una unidad de trabajo que implementa un operacion logica accesible via la interfaz publica. Para las Pruebas
Unitarias se debe aislar una clase de otra, para que el Testing sea solo sobre esa clase y no sobre sus dependencias.

2) Requerimiento de una Prueba Unitaria: 1) No accede a la BD. 2) No accede al sistema de archivos. 3) No accede a la red. 4) No requiere
una configuracion de ambiente. Herramientas de Testing: sunit, junit(unit Testing en Java), nunit(unit Testing en .NET). 

3) Estructura de Prueba Unitaria: La estructura mas comun es la de la Triple A: 1) Arrange (es donde voy a preparar el contexto de mi
prueba). 2) Act (Es donde voy a ejercitar el elemento que estoy probando). 3) Assert (es donde voy a verificar que efectivamente ocurrio
el proceso de forma adecuada) 

4) Prueba Unitaria sin Framework:

static void PruebaUnitariaString()
{
    //Arrange => aca debo preparar lo que debo hacer antes de ejecutar la prueba, desarrollar el contexto de la prueba.
    var stringHola = "hola";

    //Act => Ejecutar la prueba en si
    var Longitud = stringHola.Length

    //Assert => Verifico si el resultado es el esperado
    if(Longitud != 4) throw new Exception; 
}

                                                                2) NUnit

1) Clase Test Unit: Aquellos metodos que defina en la clase Test si quiero que sean Metodos que se ejecuten y testeen algun componente 
o clase lo que debere hacer sera marcarlo con el DataAnnotations de [Test].

public class Tests
{
    [Test]
    public void Test1()
    {
        Assert.Pass();
    }

    [Test]
    public void Test2()
    {
        Assert.Fail();
    }

    [Test]
    public void Test3()
    {
        Assert.Inconclusive();
    }

    [Test, Ignore(reason:"")]
    public void Test4()
    {
    }
}


2) Resultados posibles de un test: 1) Exitoso (pass). 2) Fallido (fail). 3) Inconcluso (error no esperado, no es un error de la logica o
de resultado, sino un error que se produce en el Arrange). 4) Ignorado (su ejecucion No fue considerada)
El test puede no tener un Assert.Pass() pero si este se ejecuto sin problemas este se va a considerar exitoso.

3) El Test Siempre sera un proyecto aparte del proyecto Principal.

4) [Setup]: En cada test que hagamos deberemos definir el contexto, muchas veces podemos definir contextos repetidos o repetitivos 
para cada TEST, por lo que existe una funcion que nos permitira centralizar la creacion de contextos en nunit. Deberemos declarar una
funcion que tenga de DataAnnotations [Setup], en el podre realizar Inicializaciones de Objetos o varibles que despues quiera reutilizar 
en mis pruebas.

private Cuenta cuenta;
[Setup]
public void SetUp(){
    var titular = new Persona(name: "juan");
    this.cuenta = new Cuenta(titular);
}