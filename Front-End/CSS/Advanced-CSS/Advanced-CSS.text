
                                                                0) Introduccion

1) 

2) FLEXBOX: Es una seccion de CSS que permite crear cajas flexibles y adaptables al tamaño de un contenedor.

3) Grid-Layaout: Seccion de CSS que permite crear diseños complejos, estableciendo filas y columnas.

4) SASS: Es un preprocesador de CSS, nos permite darle a CSS caracteristicas de un lenguaje de programacion y hacer mas eficiente su 
codigo.  

5) FONT AWESOME LINK: <script src="https://kit.fontawesome.com/525da0697a.js" crossorigin="anonymous"></script>






                                                                    1) CSS

1) CSS Funciona en base a selectores, es decir que nosotros vamos a ir a seleccionar elementos que se encuentren en nuestro codigo HTML 
y modificarlos desde CSS. Podemos Seleccionar un elemento, varios o todos, depende de lo que queramos hacer. A estos elementos 
seleccionados los modificaremos mediante propiedades (border, height, background-color) y esto modificare el style de los elementos. 

2) Selectores: 
2.1) Etiquetas: div{}, p{}. 

2.2) Id: #MyId{}, #InputId{}. 

2.3) Clases: .MyClass{}, .MyParrafoClass{}. 

2.4) Clases Concatenadas: .MyClass.AnotherClass{} (Este estilo se aplicara a los elementos que tengan ambas clases).

2.5) Selector General: *{} (Este lo que hara sera aplicar ese estilo a todas mis etiquetas, es util para resetear los valores por defecto de las etiquetas). 

2.6) Selectores Agrupados: h1, p, .myClass{} (Esto lo que hara sera aplicarle el mismo estilo a los selectores que defina separados 
por coma).

2.7) Selectores Descendientes: #contenedor p{} (esto me permite seleccionar todos elementos que esten dentro de ese contenedor, no se 
limita a los hijos solo)

2.8) Selectores Hijos: #contenedor > p{} (Esto permite seleccionar los elementos hijos directos del contenedor).

2.9) Concatenar Selectores Hijos: #contenedor > div > p{} (Esto permite hacer una cadena jerarquica en los selectores).

2.10) Selectores hermanos: Para los hermanos tenemos 2 tipos: 1) General, es decir todas las etiquetas hermanas.  .articulo h1 ~ span{}
2) Adyacente: Aquellas etiquetas hermanas que este un espacio arriba o abajo, es decir el que tiene al lado.      .articulo h1 + span{}.

2.11) Selector por atributos: 

input[type="text"]{}, 
input[type="number"]{}, 
a[href="google.com"]{}

a[href*="udemy"]{} => El * hara que seleccione todos los <a> que tengan un href en el cual se contenga la palabra udemy.
a[href^="http"]{} => El ^ hara que seleccione todos los <a> que tengan un href en el cual empiecen con la palabra https 
a[href$=".pdf"]{} => El $ hara que seleccione todos los <a> que tengan un href en el cual termine con la extension .pdf



3) PseudoClases: Una pseudoclase en CSS es una palabra clave que se añade a un selector para definir un estado especial de un elemento sin necesidad de modificar el HTML. Permite aplicar estilos a un elemento

EJ: :hover, :link, :visited, :focus.

a:link{}


3.1) not(): Es una PseudoClase de negacion, me permite decir que elementos NO deben ser seleccionados:
p:not(.miParrafo){}


3.2) PseudoClases Avanzadas: 1) :first-child. 2) :last-child. 3) :nth-child(5), esta funcion me permitira elegir manualmente a que hijo 
quiero seleccionar.

/* Elementos Pares */
p:nth-child(even){}

/* Elementos Impares */
p:nth-child(odd){}

/* Cada N Elementos */
p:nth-child(3n){}



4) PseudoElementos: Un pseudo-elemento es una palabra clave precedida por :: que se añade a un selector para aplicar estilos a una subparte del contenido de un elemento. Permite aplicar estilos a una parte específica del elemento, como la primera letra, la primera línea, o contenido insertado antes o después de un elemento, sin modificar el HTML. Basicamente es contenido proyectado por CSS y no mediante HTML.

Para trabajar con after y before debo utilizar la propiedad content obligatoriamente.

| Pseudo-elemento  | ¿Qué hace?                                                     |
| ---------------- | -------------------------------------------------------------- |
| `::before`       | Inserta contenido **antes** del contenido real del elemento    |
| `::after`        | Inserta contenido **después** del contenido real del elemento  |
| `::first-letter` | Aplica estilos a la **primera letra** del texto de un elemento |
| `::first-line`   | Aplica estilos a la **primera línea** de un párrafo o texto    |
| `::selection`    | Estiliza el texto **seleccionado** por el usuario              |
| `::marker`       | Estiliza los **marcadores** de listas (`<ul>`, `<ol>`)         |
| `::placeholder`  | Estiliza el texto **placeholder** de inputs y textareas        |


span::before{
    content: '-';
    font-size: 30px;
}

input::placeholder{
    font-size: 18px;
    color: red;
}


li::marker{
    color: violet;
}


5) Metodologia BEM: Block Element Modifier. Es una Metodologia que busca estandarizar el nombre de las clases que creemos y que estas sean 
mas legibles y faciles de entender. Tambien me permite desacoplar los Styles de etiquetas especificas, ya que estos styles lo desacoplaremos 
en clases que seran reutilizables para otros elementos.

- B BLOCK    .block
- E Element  .block__item
- M Modifier .block-modifier 

<div class="block">
    <button class="block__button"></button>
    <button class="block__button block-backRed"></button>
</div>

.block{}
.block__button{}
.block-backRed{}


6) Herencia CSS: En CSS puedo hacer que mis elementos hereden styles de elementos padres. Para heredar los valores padres de una propiedad en un 
elemento hijo puedo usar inherit.

body{
    color: red;
    border 1px solid blue;
}

div{
    border: inherit;
}

<body>
    <div>
        <p>Hola!</p>
    </div>
</body>


7) Prefijos: Un prefijo de navegador es una cadena corta (como -webkit-, -moz-, etc.) que se añade antes del nombre de una propiedad CSS o valor para asegurar la compatibilidad con navegadores que aún no soportan la versión final de esa característica. Basicamente los prefijos buscan asegurar la compatibilidad de las propiedades en el navegador.

| Prefijo    | Navegador asociado            |
| ---------- | ----------------------------- |
| `-webkit-` | Chrome, Safari, Edge moderno  |
| `-moz-`    | Firefox                       |
| `-ms-`     | Internet Explorer, Edge viejo |
| `-o-`      | Opera (versiones antiguas)    |

div {
    transform: translateX(5px);
    -webkit-transform: translateX(5px);
    -moz-transform: translateX(5px);
    -ms-transform: translateX(5px);
}


8) Variables: CSS3 me permite almacenar valores en variables reutilizables. Para declarar varibles lo tengo que hacer en la pseudoclase :root.

:root {
  --color-principal: #007bff;
  --espaciado: 16px;
}

body {
  color: var(--color-principal);
  padding: var(--espaciado);
}


9) Unidad de Medida Fija: Determinan el tamaño de un contenedor, imagen o fuente, las unidades fijas siempre van a tener un tamaño fijo
establecido. La mas popular y utilizada son los Pixeles.

9.1) q: Es el cuarto de un milimetro, es la unidad de medida mas pequeña de CSS.

9.2) px: Es el tamaño en Pixeles, es la mas popular de las unidades de medidas fijas.

9.3) pt: Es el tamaño en puntos.

9.4) mm: Es el tamaño en milimetros.

9.5) cm: Es el tamaño en centimetros.


10) Unidades de medidas relativas: Determinan el tamaño de un contenedor, imagen o fuente, pero en base al contenedor padre. Son relativas 
al tamaño de su contenedor padre. Ser relativa significa que no tienen un valor fijo como los píxeles (px), sino que dependen del contexto.

Por EJ el % es una unidad relativa, ya que el tamaño dependera del tamaño del elemento padre.

10.1) em: es una unidad de medida relativa al FONT-SIZE del elemento padre. Por EJ si tengo un padre que tiene un font-size de 10px y defino que el hijo tiene un font-size de 2em estos seran 20px. Si lo utilizo en otras propiedades, por EJ Width esta se seguira calculando en base al FONT-SIZE

div{
    font-size: 20px;
}

p{
    width: 5em; // Sabiendo que p es hijo del div, 5em en este caso seran 100px
}


10.2) rem: rem significa "root em" y es una unidad de medida relativa al FONT-SIZE del elemento :root (es decir, del <html>). Funciona igual que em pero la relatividad no es con el padre directo sino con la etiqueta html. 


10.3) %: El tamaño en pixeles dependera del tamaño del contenedor padre, porque con el % basicamente estoy diciendo que porcentaje del 
padre ocupara mi elemento hijo. Esta es muy recomendada al trabajar con Responsive-Design

.container {
    background-color: red;
    width: 50%;
    height: 100px;
}


11) Unidades de medidas Flexibles: Estas van a ser unidades flexibles al ViewPort, al tamaño de la pantalla del navegador.

11.1) vh: Se calculara en base a la altura de nuestro ViewPort

11.2) vw: Se calculara en base al ancho de nuestro ViewPort. El VW es muy util a la hora de definir el tamaño de las fuentes de texto y titulos,
ya que el tamaño de la fuente dependera del ancho de mi pantalla.

11.3) vmin: Basado en el menor valor entre el ancho y el alto del viewport, se agrandara en pantallas mas grandes hasta un limite y se 
achicara en pantallas pequeñas sin limites.

11.4) vmax: Basado en el mayor valor entre el ancho y el alto del viewport, se achicara en pantallas pequeñas hasta un limite y se agrandara 
en pantallas grandes sin limites.

| Unidad | Basado en...                  |
| ------ | ----------------------------- |
| `vw`   | 1% del **ancho** del viewport |
| `vh`   | 1% del **alto** del viewport  |
| `vmin` | 1% del lado **más chico**     |
| `vmax` | 1% del lado **más grande**    |

El vmax y vmin se lo utiliza para definir lo maximo/minimo que puede crecer o decrecer mi contenido.



12) Funciones:

12.1) calc(): Esta funcion me permite realizar calculos matematicos con distintas unidades de medidas, lo cual puede ser util.
.menu{
    background-color: black;
    width: 100%;
    height: 100px;
}

.container {
    background-color: red;
    width: 100%;
    height: calc(100vh-100px);
}


12.2) min(): permite calcular el valor mínimo entre dos o más expresiones. Es útil cuando querés que una propiedad CSS (como width, height, font-size, etc.) se limite al valor más chico entre varias opciones. Es decir yo le voy a dar varias opciones y CSS elegira aquella que sea 
mas pequeña y se la asignara.

width: min(100%, 500px);
Esto significa: Usá el ancho más chico entre el 100% del contenedor y 500px.

✔️ Si el contenedor mide 800px → el width será 500px.
✔️ Si el contenedor mide 400px → el width será 400px.


12.3) max(): Es lo mismo que min() pero a la inversa, elegira al valor mayor de varias expresiones.


12.4) clamp(): Sirve para definir un valor flexible, pero dentro de un rango mínimo y máximo, combinando min() y max() en una sola expresión.
Este lo que hara sera usar la segunda medida siempre y cuando esta no exceda el minimo ni el maximo.

font-size: clamp(14px, 2vw, 24px);
Esto significa: "El tamaño del texto será 2vw, pero nunca menos de 14px ni más de 24px".

✔️ En pantallas chicas → el texto mide 14px
✔️ En pantallas medianas → el texto crece dinámicamente con el 2vw
✔️ En pantallas grandes → el texto se frena en 24px


12.5) attr(): Esta funcion nos permite acceder al valor de un data-attribute, para ello le debo pasar el nombre del data-attribute.

h1::after{
    content: attr(data-name);
}


13) Data-Attributes en CSS: Los Data-Attributes son caracteristicas de HTML que me permite crear etiquetas personalizadas. CSS Nos permite poder 
acceder a ellas mediante la funcion attr().


14) Colores:

14.1) Palabra Clave: background-color: red;

14.2) Hexadecimal: background-color: #129700; // Hexadecimal Trasparente: background-color: #12970050;

14.3) RGB: background-color: rgb(17,0,255); // RGBA: background-color: rgba(17,0,255, 0.5);

14.4) HSL (Hue, Saturation, Light): background-color: hsl(125, 100%, 40%); // HSLA: background-color: hsla(125, 100%, 40%, 50%);

14.5) Linear-Gradient(): Esta funcion la puedo utilizar para hacer backgrounds con degradado de colores. El primer parametro sera la cantidad de 
grados del degradado y los otros 2 parametros (pueden ser mas de 2 tambien) seran los colores del degradado.

background: linear-gradient(90deg, blue, orange, crimson);

14.6) Radial-Gradient: Similar al anterior, pero el gradiente sera en forma circular, por lo cual solo necesitare pasarle colores como parametro.

background: radial-gradient(blue, orange, crimson);


15) Opacity: Tambien servira para cambiar el grado de trasparencia, pero a diferencia de los colores esta trasparencia se la aplicara al 
contenedor y a sus objetos hijos.


16) Background: Esta propiedad nos permitira manipular el background de un elemento.

div {
    /* Fondo con color plano */
    background-color: red;

    /* Gradientes */
    background: linear-gradient(90deg, red, orange);
    background: radial-gradient(90deg, red, orange);

    /* Imagen de fondo */
    background-image: url(img/wallpaper.jpg);
    /* Si la imagen es muy pequeña puedo definir el comportamiento si esta debe o no repetirse hasta llenar el container */
    background-repeat: no-repeat; 

    /* Esta propiedad ajustara la imagen al contenedor segun el parametro que le pasemos.     
    Contain: Buscara que la imagen entre dentro del contenedor pero manteniendo el aspect-ratio original
    Cover: Buscara que la imagen cubra todo el contenedor, manteniendo el Aspect-Ratio, pero esto puedo generar que parte de la imagen
    original quede por fuera del contenedor.
    */
    background-size: cover;

    /* Esta definira la posicion de la imagen, el primer parametro modificara la posicion en X y el segundo en Y */
    background-position: center top;

    /* Me permitira definir el comportamiento de mi imagen en el scroleo */
    background-attachment: fixed;


    /* Shorcut */
    background: url(img/wallpaper.jpg) no-repeat center fixed ;
    background-size: cover;
}


16.1) Background-Blend-Mode: Esta nueva propiedad permite mezclar imagenes y colores en mis Backgrounds. Por Ejemplo puedo juntar 2 
imagenes, una de ellas con trasparencia y otra sin y juntarlas dando el efecto que es una sola.

div{
    width: 100vw;
    height: 100vh;
    background: url('') no-repeat, url('') no-repeat, blue;
    background-size: cover;
    background-position: center;

    /* Blend Mode - El mas popular es el multiply*/
    background-blend-mode: multiply;

    /* 
        -Multiply - Combina las imagenes
        -Darken - Lo mismo que Multiply pero mas oscuro
        -Lighten - Lo mismo que Multiply pero mas claro
        -luminosity
    */
}


17) Mix-Blend-Mode: Esta propiedad me permitira combinar y fusionar elementos padres con elementos hijos, similar a lo que hacemos en el 
blend-mode del background. Esto basicamente me permite combinar un elemento con lo que tiene de fondo.

h1{
    /* Como un elemento se mezcla con el que esta detras (se mezcla un hijo y padre) */
    mix-blend-mode: overlay; // Existen otras varias propiedades
}


18) Object Fit: Esta propiedad nos permitira manipular las imagenes de un contenedor y ajustarla para que se vea bien.

img{
    // Esto es para que la imagen ocupe el 100% de su contenedor
    width: 100%;
    height: 100%;

    // Similar a las propiedades del background-size y background-position
    object-fit: cover;
    object-position: center top;
}


19) Filtros: Son una serie de propiedades que me permitiran modificar una imagen o los elementos hijos de un contenedor (el padre no se vea afectado por los filtros):

19.1) grayscale(): Esta propiedad me permitira modificar mi escala de grises. Mientras mas cercana al 1/100% mas gris sera mi IMG.

19.2) blur(): Me permite darle un efecto de blur a la imagen. Los valores son mediante PX.

19.3) sepia(): Me permite darle un tono sepia a la imagen, sus valores son con porcentajes o del 0 al 1.

19.4) saturate(): Me permite modificar el grado de saturacion de mi imagen.

19.5) opacity(): Me permite modificar el grado de opacidad de la imagen.

19.6) brightness(): Me permite modificar el grado de brillo de mi imagen.

19.7) contrast(): Me permite modificar el grado de constraste de mi imagen.

19.8) hue-rotate(): Me permite cambiar los colores de mi imagen mediante una rotacion expresada en grados.

19.9) invert(): Me permite sacar el negativo de una imagen, sus colores invertidos.

19.10) drop-shadow(): Es un filtro que me permite crearle sombras a un elemento. Esto permite que mis imagenes tengan un efecto tri-dimensional.

img{
    width: 80%; 
    filter: grayscale(50%);
    filter: blur(3px);
    filter: sepia(50%);
    filter: saturate(50%);
    filter: opacity(50%);
    filter: brightness(150%);
    filter: contrast(50%);
    filter: hue-rotate(90deg);
    filter: invert(70%);
    filter: drop-shadow(16px 16px 16px black);
}


20) BackDrop Filter: Esta propiedad me permitira aplicarle filtros al FONDO del elemento padre. Esto me permitira que a diferencia de filter, los elementos que esten dentro del elemento padre no se vean modificados por los filtros, ya que estos solo modificaran al padre y no a sus hijos al usar backdrop.

div{
    width: 500px;
    height: 100vh;
    backdrop-filter: blur(15px) brightness(20%);
}



21) Sombras/Shadows: Para poder crear sombras tenemos la propiedad box-shadows. El primera valor es cuanto se desplaza la sombra en el Eje X y 
el segundo cuanto se desplaza la sombra en el Eje Y. El tercer valor sera la difuminacion/opacidad de la sombra y El cuarto modificara el tamaño de la sombra. El ultimo parametro sera el color de la sombra

div{
    width: 300px;
    height: 300px;
    background-color: gray;
    margin: 50px auto;

    /* Sombras */
    box-shadow: 10px 10px 15px 3px black;
}


21.1) Sombras Multiples: El combinar sombras pueden dar efectos interesantes y mas vistosos que el utilizar una sola sombra:

h1:hover{
    color: #FFF;
    text-shadow: 
    0 0 10px #FFF, 
    0 0 20px #FFF,
    0 0 40px #ff0000,
    0 0 80px #FFF,
    0 0 120px #FFF;
}


21.2) Text-Shadow: Es lo mismo que box-shadow pero para textos. La principal diferencia es que el parametro del tamaño de la sombra se suprime, quedando solo 4 parametros (Eje X, Eje Y, difuminacion y Color)

h1{
    text-shadow: 5px 0 15px #000;
}


21.3) Box-Shadows vs Drop-Shadow: box-shadow lo que hace es aplicarle una sombra al contenedor completo, en cambio drop-shadow le aplica sombra 
solo a la imagen y no al contenedor entero.


22) Fonts: Las propiedades de Fonts me permitiran manipular las fuentes de mi pagina:

22.1) Font-Family: Esta propiedad me permitira definir el tipo de fuente. La buena practica es definir una familia de fuentes, en el caso 
en el que la fuente que seleccionamos no exista en el sistema del usuario.

Para agregar fuentes nuevas ademas de las que vienen por defecto puede ir a google fonts, y usarlas mediante el link de codigo embebido o descargandolas. Si las descargo debera utilizar font-face para cargarlas en CSS:

// Exportar Fuente Local Descargada
@font-face {
    font-family: "Libertinus Mono";
    src: url(fonts/Libertinus_Mono/LibertinusMono-Regular.ttf);
}

h1{
    font-family: "Libertinus Mono";
}

// Exportar fuente de Google desde HTML
<link href="https://fonts.googleapis.com/css2?family=Libertinus+Mono&display=swap" rel="stylesheet">

// Exportar fuente de Google desde CSS
@import url(https://fonts.googleapis.com/css2?family=Libertinus+Mono&display=swap)


22.2) Font-Size: Esta propiedad me permite definir el tamaño de mi fuente.

22.3) Font-Weight: Esta propiedad me permite definir el grosor de mi fuente. Tambien decirle si quiero que sea Negrita.

22.4) Font-Style: Esta propiedad me permite definir el estilo de mi fuente, si quiero que sea italico.

22.5) Letter-Spacing: Esta propiedad me permite definir en pixeles el espaciado entre las letras. 

22.6) Word-Spacing: Esta propiedad me permite definir el espaciado entre palabras.

22.7) Line-Height: Esta propiedad me permite definir el espacio del interlineado.

22.8) Text-Indent: Esta propiedad me permite definir la sangria

22.9) Text-Fill y Text-Stroke: Estas propiedades trabajan en conjunto, una definira el color de mi fuente (text-fill) y la otra definira un border y su color.

22.10) Text-Align: Me permite alinear el texto en el Eje X.

22.11) Text-Transform: Me permite modificar las mayusculas y minusculas del texto.

h1{
    font-size: 55px;
    font-weight: 800;
    font-style: italic;
    letter-spacing: 5px;
    word-spacing: 10px;
    line-height: 250px;
    text-indent: 50px;

    /* Trabajan en conjunto */
    -webkit-text-fill-color: aliceblue;
    -webkit-text-stroke: 2px #000;

    text-align: center;
    text-transform: uppercase;
}

23) Hypens: Hypens se refiere al quiebre de palabra, es decir fragmentar una palabra que se esta desbordando de mi contenedor porque es demasiado grande. Para lograr evitar el desbordamiento tenemos 3 metodos.

div{
    width: 150px;
    border: solid 1px #000;

    /* Primera forma */
    overflow-wrap: break-word;

    /* Segunda Forma */
    word-break: break-all;

    /* Tercera Forma */
    hyphens: auto;
}


24) min-width y max-width: Estas propiedades me permiten definir un maximo y minimo al ancho de un elemento. Es util cuando trabajo con 
unidades flexibles pero quiero definir algun extremo (maximo o minimo) con una medida fija.

div{
    background-color: blue;

    /* Ancho y Alto */
    width: 50%;
    height: 50vh;
    
    /* Maximos y Minimos */
    max-width: 350px;
    min-width: 100px;

    max-height: 1000px;
    min-height: 350px;
}


25) Border-Radius: Esta propiedad me permite crear bordes redondeados. Tambien cuenta con diferentes Shorcuts para definir el redondeado de cada esquina de la caja.

div{
    width: 700px;

    /* Forma comun, todas las esquinas tendran el mismo redondeado */
    border-radius: 50px;

    /* De esta forma el primer valor se lo aplicara al borde arriba a la izquierda y abajo a la derecha y el Segundo a los 2 restantes*/
    border-radius: 20px 50px;

    /* 1er valor: Arriba izquierda. 2do valor: arriba derecha y abajo izquierda. 3er valor: abajo derecha */
    border-radius: 20px 50px 80px;

    /* Sentido agujas del reloj */
    border-radius: 20px 50px 80px 40px;
}


26) Outline: Es una línea que se dibuja por fuera del borde del elemento, como un marco adicional. Se usa para enfocar elementos (:focus), por ejemplo cuando hacés clic o tabulás sobre un botón o un input. Su seteo es similar al border, pero Outline no tiene impacto en el Box-Model ni ocupa espacio como tal.

input:focus{
    outline: red 2px solid;
    /* El Offset me permite ajustar el posicionamiento del Outline */
    outline-offset: -1px;

    /* Si no quiero tener un Outline uso none */
    outline: none;
}

| Característica                                     | `border`                     | `outline`                         |
| -------------------------------------------------- | ---------------------------- | --------------------------------- |
| Forma parte del box                                | ✅ Sí, afecta el tamaño total | ❌ No afecta el tamaño del box     |
| Puede tener bordes individuales (`top`, `left`...) | ✅                            | ❌ No, es un solo contorno general |
| Ocupa espacio                                      | ✅ Sí                         | ❌ No                              |
| Se puede redondear con `border-radius`             | ✅                            | ❌ No                              |
| Se usa para...                                     | Diseño visual del elemento   | Indicaciones de interacción       |



27) Desbordamiento de Contenido: Puede suceder que nuestra caja no pueda contener todo su contenido, y por ende este termine desbordandose.
Para manejar el desbordamiento de contenido existe Overflow. 

div{
    width: 200px;
    height: 250px;
    background-color: red;

    overflow: visible;  /* Este valor mostarara el desbordamiento */
    overflow: hidden;  /* Este valor ocultara el desbordamiento */
    overflow: scroll; /* Este valor permitira utilizar una barra de scroll para ver el contenido desbordado */
    overflow: auto;  /* Este valor hara lo mismo que Scroll, pero si el contenido no esta desbordado no tendra barras de scroll, 
                        Es la mejor opcion para manejar el desbordamiento*/
}



28) Desbordamiento de Texto: En el caso de que tenga texto desbordandose o quiera recortar mi texto original a uno mas breve, lo puedo hacer 
de la siguiente forma:

/* Forma estandar */
h1{
    /* Defino el ancho del contenido */
    width: 300px;

    white-space: no-wrap; /* Esto hara que mi texto no cree parrafos para evitar el desbordamiento, por ende se desbordara */
    overflow: hidden; /* Ocultaremos ese desbordamiento que generamos */
    text-overflow: ellipsis; /* Con esta haremos que nuestro texto desbordado tenga puntos suspensivos que indican que este sigue */
}


/* Variante, me permite decir cuantas lineas puedo escribir antes del desbordamiento*/
h2{
    width: 300px;

    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 5;
    overflow: hidden;
}


29) Desplegar texto en columnas: Cuando hablamos de desplegar significa separar nuestro texto en columnas como lo hace un diario, basicamente 
fragmentamos nuestro texto en bloques.

// HTML
<div>
    <p>Texto</p>
</div>


/* CSS */
div{
    column-count: 3; /* En cuantas columnas separare mi texto */
    column-gap: 20px; /* Distancia entre las columnas */
    column-rule: 2px solid black; /* Sera una linea que separara mis columnas */
}



30) Barras de Scroll Personalizadas: Para poder personalizar las barras de scroll debo acceder a ellas. Para esto lo que debo hacer es seleccionar el elemento que contiene una barra de scroll (el body por ejemplo) y luego a la scrollbar mediante un PseudoElemento.

/* Aca selecciono el fondo sobre el cual se desplaza la barra */   
body::-webkit-scrollbar{
    width: 10px;
    background: rgba(128, 128, 128, 0.5);
}

/* Aca selecciono la barra */
body::-webkit-scrollbar-thumb{
    background: #414141;
}

.contenedor::-webkit-scrollbar{
    width: 7px;
}

.contenedor::-webkit-scrollbar-thumb{
    background: #00a2ff;
    border-radius: 5px; // Esto redondeara la barra de scroll
}


31) Smooth Scroll:
html{
    scroll-behavior: smooth;
}


32) Cursor Personalizado:
button{
    cursor: url(image/cursor.png), auto;
}


33) ShapeOutside: Esta propiedad me permite modificar como se comportaran las elementos de mis alrededores de mi caja, por EJ puedo hacer que los 
elementos exteriores vean a mi elemento como un circulo y no una caja cuadrada.

img {
    width: 250px;
    height: 250px;
    border-radius: 50%;
    shape-outside: circle();
}


34) Formas de Centrar contenido sin Flex ni Grid:

/* Primera forma, esta solo permitira centrar textos */
div{
    position: relative;
    background: crimson;
    color: #FFF;
    width: 500px;
    height: 500px;
}


h1{
    text-align: center;
    line-height: 500px;
}


/* Segunda forma */
div{
    position: relative;
    background: crimson;
    color: #FFF;
    width: 500px;
    height: 500px;
}

.contenido{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

34.1) Line-Height Trick: Si quiero centrar texto verticalmente en un contenedor lo que debo hacer es darle un line-height del mismo tamaño que el 
alto del contenedor, si mi contenedor son 50px mi line-height seran 50px.


35) Clip-Path: Esta nueva propiedad me permite crear formas/figuras con mis elementos:

div{
    width: 300px;
    height: 300px;
    background-color: red;
    clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
}

Pagina: https://bennettfeely.com/clippy/

                                                            2) CSS Box Model

1) Box-Model/Modelo-De-Cajas: Todos los elementos/etiquetas de HTML tienen unas "cajas imaginarias", esto es lo que se conoce como box-model.
Estas cajas estaran compuestas en distintas partes: 1) Margin. 2) Border. 3) Padding. 4) Content.

1.1) Margin: El Margin viene a definir el espaciado de mi caja con respecto a otras cajas, Margin es el margen entre cajas.

1.2) Border: Border es un delimitador de mi caja, genera un borde sobre el final de mi caja.

1.3) Padding: Es el espaciado interior de mi caja, es basicamente un margin, pero una que separa el contenido interior, de los limites de mi 
caja.

1.4) Content: Es el tamaño de mi contenido, depende de mi Box-Sizing se calculara de una forma u otra.

/* EJ */
div{
    background-color: rgb(0, 0, 0);
    color: white;
    /* Ancho y Alto */
    width: 250px;
    height: 300px;
    
    margin: 20px 20px 20px 20px /* top right bottom left*/;
    padding: 20px 25px; /* Eje Y - Eje X */
    border: solid 5px red;
}


2) Box-Sizing: Esta propiedad define como se calculara el tamaño (ancho y alto) de mis cajas, para esto tenemos 2 valores: 

2.1) content-box: El ancho y alto definidos solo aplican al contenido del elemento. Los padding y border se suman por fuera de ese tamaño.
Por EJ, si defino que una caja sera de 200x200, el tamaño del Content sera ese valor. El padding y border luego se sumaran a esa cifra y daran el tamaño total de esa caja, es decir que la caja sera la suma del Content + Padding + Border.

/* EJ */
box-sizing: content-box;
width: 200px;
padding: 20px; // El padding agrega 40px (20px a cada lado).
border: 5px solid black; // El border agrega 10px (5px a cada lado).

➜ El tamaño total del elemento será 250px de ancho (200px originales + 50px del padding y border).


2.2) border-box: El ancho y alto definidos incluyen contenido, padding y borde. Es decir, el width es el tamaño total, y el contenido se ajusta automáticamente. Esto es el valor que se utiliza actualmente para diseñar paginas web.

/* EJ */
box-sizing: border-box;
width: 200px;
padding: 20px;
border: 5px solid black;
➜ El tamaño total del elemento será 200px de ancho y el contenido ahora ocupara solo 150px. 
(200px originales - 40px padding - 10px border = 150px Content)



3) Normalize Styles: Es un conjunto de reglas para eliminar (o normalizar) los estilos por defecto que los navegadores aplican a los elementos HTML. Esto permite empezar desde una base limpia y consistente.
Normalizador: https://necolas.github.io/normalize.css/



                                                                3) Displays

1) Display: Cuando hablamos de display en CSS, estamos hablando de como se muestra un elemento en la página y como se comportan sus hijos (si es que tiene).


1.1) Block: Si un elemento tiene display block (por defecto muchas etiquetas lo usan) ocupara todo el ancho disponible, independientemente de 
que el elemento tengo un ancho menor.


1.2) Inline: Este alineara los elementos unos al lado del otro (en linea). El elemento con este display solo ocupa el ancho y alto del contenido, no respeta valores definidos por width ni height, ya que el tamaño del elemento se amoldara al contenido solamente. Generalmente se lo usa en etiquetas de texto solamente.


1.3) Inline-Block: Es como Inline pero si respeta valores definidos por width y height, basicamente cuando quiero tener elementos con un width y 
height definidos pero en linea, siempre y cuando el ancho de la pantalla lo permita.


1.4) None: Este directamente oculta la caja, la oculta y tampoco ocupa espacio, es como si no estuviera.


1.5) Flex: Convierte un contenedor en flexbox, lo que permite alinear sus hijos con gran control. Basicamente vuelvo a las cajas flexibles para 
su manipulacion. La direccion de las cajas las manejo con ROW y COLUMN y las alineaciones con justify-content y align-items.


1.6) Grid: Convierte un contenedor en una grilla bidimensional, defino columnas y filas para manejar el espaciado. Contenedor en cuadrícula.


2) Otros: 1) List-item: Se mostraran como elementos de una lista. 2) Table-cell: Actua como la celda una tabla. 3) Table-row: Actua como la fila de una tabla.


                                                                4) Positions

1) Position: Position es una propiedad de CSS que define cómo se ubica un elemento en la página y respecto a qué otro elemento se posiciona. Basicamente position me permite indicarle donde se va a colocar un elemento y como se comporta con el posicionamiento de otros elementos.
Para mover un elemento puedo utilizar top, left, right y bottom, siempre y cuando no sea static el position.


1.1) Static: Es el valor por defecto, utiliza el orden natural de los elementos HTML. Es decir el orden de los elementos sera definido por como 
esten ordenados en HTML (del primero al ultimo).


1.2) Relative: Este valor me permitira mover mi caja en base a su posicion inicial. Los elementos de alrededor no ignoran su posicionamiento.

position: relative;
top: 10px;
left: 20px;
Se mueve 10px hacia abajo y 20px hacia la derecha, respecto a su posicion original.


1.3) Absolute: Este valor lo que hara es que el resto de elementos lo ignoren, como si no existiera (no ocupa espacio). Su caja (su ocupe de espacio) es ignorada por otros elementos. El posicionamiento de este sera en base al primer padre/ancestro que tenga un position que no sea static. Si no encuentra uno, se posiciona respecto al viewport

section{
    background-color: black;
    width: 350px;
    height: 350px;
    position: relative;
}


div{
    background-color: violet;
    width: 50px;
    height: 50px;
    position: absolute;
    bottom: 0;
}


1.4) Fixed: Es muy similar a absolute, pero este no se posicionara con el ancestro posicionado mas cercano, sino que se se posiciona respecto al viewport. Tiene la caracteristica de que al hacer scroll este siempre se mantendra fijo en la pantalla. Muy usado para Navs, botones "UP", menús fijos, etc.

nav {
    position: fixed;
    width: 100%
    height: 15vh;
    background-color: #222;
    top: 0;
    right: 0;
}



1.5) Sticky: Es una mezcla entre relative y fixed. El elemento se comporta como relative hasta que el scroll alcanza la posición indicada (por ejemplo, top: 0). A partir de ahí, se "pega" a esa posición dentro del área visible del contenedor padre, como si fuera fixed, pero solo mientras el contenedor padre lo permita. A diferencia de fixed, sticky no está anclado al viewport en todo momento, solo hasta donde el padre se lo 
permita.

ERRORES: No defino un valor en TOP y/o mi Padre no Tiene un height definido, sticky no funcionara como deseo.

/* Padre */
section{
    width: 800px;
    height: 500px;
    margin: 50px auto;
    background-color: gray;
    position: relative;
}

/* Hijo */
div{
    width: 100px;
    height: 100px;
    background-color: pink;
    position: sticky;
    top: 0;
}




| Tipo       | Sale del flujo          | Se puede mover con `top/left` | Se posiciona respecto a...               |
| ---------- | ----------------------- | ----------------------------- | -------------------------------------    |
| `static`   | ❌ No                    | ❌ No                          | No aplica                             |
| `relative` | ❌ No                    | ✅ Sí                          | Su propia posición original           |
| `absolute` | ✅ Sí                    | ✅ Sí                          | El contenedor posicionado más cercano |
| `fixed`    | ✅ Sí                    | ✅ Sí                          | El viewport (pantalla)                |
| `sticky`   | ❌ (hasta que se "pega") | ✅ Sí                          | El scroll del contenedor o body       |


2) Z-Index: Todos aquellos elementos que tengan un position diferente a static, pueden usar esta propiedad. Esta viene a ser una especie de 
indicador de la capa en la que se esta visualizando X objeto.



3) float: Se lo utiliza para wrappear texto a una imagen, generalmente no se lo usa para maquetar layaouts. Float me permite anclar mi img 
hacia un costado.

div{
    width: 50%;
    margin: 20px auto;
    padding: 20px;
    border: 4px solid gray; 
}

img {
    width: 250px;
    height: 250px;
    margin: 20px;
    float: left;
}

<div>
    <img src="image/wallpaper.jpg" alt="">
    <p>TEXTO</p>
</div>


4) Inset: es una shorthand de posicionamiento en CSS para elementos position: absolute o fixed. Sirve para asignar todas las direcciones a la vez: top, right, bottom y left.


                                                5) Transiciones, Transformaciones y Animaciones

1) Transitions: Es el cambiar el estado de un elemento de forma progresiva y no abrupta. Por EJ en los estados de hover, cuando haga un hover
quiero aplicar otros estilos a mi elemento pero no quiero que sea abrupto, sino progresivo. Es util para crear una "animacion" en el traspaso de un estilo a otro mediante el uso de estados.

.elemento1{
    background-color: orange;
    /* Primero defino que propiedad debe tener la transicion, segundo el tiempo de esta transicion, tercero el tipo de animacion y el 4º el delay para empezar la animacion*/
    transition: background-color 2s ease 1s, width 2s ease-in 1s, height 2s ease-out 1s;
}

.elemento1:hover{
    background-color: red;
    width: 250px;
    height: 250px;
}


2) Transform: Esta propiedad me permite mover, rotar, escalar y deformar mi elemento con distintas funciones. Funciones: 1) Translate, esta funcion me permite trasladar/mover mi elemento de su posicion original, en los ejes x/y. 2) Scale, esta funcion me permite escalar mi elemento, tanto agrandarlo como achicarlo. 3) Rotate, esta funcion me permite rotar mi elemento, el mas comun de usar es la rotacion en Z.
4) Skew, esta funcion permite deformar mi objeto, como si lo estuviera estirando.

#transladar{
    background-color: orangered;
    transform: translate(500px, 200px);
}

#escalar{
    background-color: mediumslateblue;
    transform: scale(1.5);
}

#rotar{
    background-color: cyan;
    transform: rotate(136deg);
}

#deformar{
    background-color: greenyellow;
    transform: skew(20deg);
}



2.1) Transform-Origin: La propiedad transform-origin define el punto de referencia desde el cual se aplica una transformación (transform) en un elemento. Por defecto, las transformaciones se aplican desde el centro del elemento, pero transform-origin te permite cambiar ese origen. 
Basicamente esta propiedad me permite modicar el ancla sobre el cual se ejecuta la transformacion, que por defecto es el centro.

transform-origin: top left;


2.2) Transformaciones 3d: Ademas de mover los elementos en 2 dimensiones, tambien lo podemos hacer en una tercera dimension. Para esto obligatoriamente mi elemento padre del elemento que quiero darle un transform en 3d debe tener un valor de perspective definido. Tambien puedo cambiar la perspectiva de origin, que basicamente es ver el mismo elemento de distintos angulos.

body{
    perspective: 700px;
    perspective-origin: center;
}

.shape{
    background-color: greenyellow;
    width: 300px;
    height: 300px;
    margin: 100px auto;
    transition: 2s all;

    /* Propiedades por separado */
    transform: rotateY(50deg);
    transform: rotateX(50deg);
    /* Shorcut, rotate3d(x,y,z, deg), 1 significa que quiero rotar en esa direccion, 0 que no. */
    transform: rotate3d(1,1,0, 50deg);

    /* El Traslado en Z hara que el elemento se acerque o aleje en la pantalla */
    transform: translateZ(300px);
    transform: translate3d(100px, 100px, 200px);


    /* Tambien puedo escalar en el eje z, para apreciarlo debo rotar el elemento sino no vere el escalado */
    transform: scaleZ(2) rotateY(90deg);


    /* Si este elemento hijo, quiere a su vez ser padre de otro elemento y que este tenga el 3d, debo usar la siguiente propiedad */
    transform-style: preserve-3d;
}

.shape:hover{
    transform: rotateY(360deg);
}

.shape__child{
    width: 300px;
    height: 300px;
    background-color: yellow;
    margin: auto;

    transform: rotateY(90deg);
}


3) Animaciones: Las animaciones permitiran que mis objetos esten mas vivos en CSS, para crear estas tenemos 2 pasos: 1) Configurar las propiedades de animacion. 2) Crear la animacion como tal.


/* PASO 1 - PROPIEDADES DE ANIMACION */ 
/*
- animation-name	          -- Nombre de la animacion que va a ejecutar - Obligatoria
- animation-duration	      -- Duracion
- animation-timing-function	  -- Movimiento
- animation-delay             -- Retraso/Delay
- animation-iteration-count	  -- Cantidad de veces que se repite
- animation-direction	      -- Direccion, es decir desde donde se ejecutara la animacion (Normal, Reverse). Alternate permitira volver
                                 ejecutar la animacion desde donde me queda al final de la primera ejecucion
- animation-fill-mode	      -- Que mostrara cuando termine, FOWARDS hace que se quede con el ultimo estilo definido, BACKWARDS vuelve al
                                 estado antes de la animacion
- animation-play-state        -- Estado de reproduccion, running or paused
*/   
div{
    width: 200px;
    height: 200px;
    background: gray;
    margin: 50px 0;

    /* Propiedades de animacion */
    animation-name: changeColor;
    animation-duration: 5s;
    animation-timing-function: ease;
    animation-delay: 0s;
    animation-iteration-count: 1;
    animation-direction: alternate; 
    animation-fill-mode: forwards;
    animation-play-state: running;


    /* Atajo */
    animation: changeColor 5s ease infinite alternate running;
}


/* PASO 2 - CREAR LA ANIMACION */
@keyframes changeColor{
    0%{
        background: blue;
    }
    50%{
        background: orange;
    }
    100%{
        background: black;
    }
}



4) Timing Functions:

4.1) Linear: Velocidad lineal durante toda la animacion.

4.2) Ease: Normal al principio - Muy Rapido al intermedio - Lento al final.

4.3) Ease-In: Muy Lento al principio - Rapido al final.

4.4) Ease-Out: Muy Rapido al principio - Muy lento al final.

4.5) Ease-In-Out: Lento al principio - Muy Rapido al intermedio - Lento al final.

4.6) Steps: Esta me permite definir la cantidad de pasos en la que quiero separar mi animacion.

animation-timing-functions: steps(4, jump-start); // Divido mi animacion en 4 pasos, se salta el inicio
animation-timing-functions: steps(4, jump-end); // Divido mi animacion en 4 pasos, se salta el final
animation-timing-functions: steps(4, jump-both); // Divido mi animacion en 4 pasos, se salta el inicio y el final
animation-timing-functions: steps(4, jump-none); // Divido mi animacion en 4 pasos, el mas utilizado


4.7) Cubic-Bezier: Es una funcion que permite crear mis propios timing functions, definiendo la velocidad de ejecucion de mis animaciones.





                                                                6) Flexbox

1) Flexbox: Esta propiedad me permite crear cajas flexibles. Al Contenedor padre si le damos un display flex, nos permitira acomodar cajas 
con tamaños y distribucion de espacios flexibles. Basicamente las cajas hijas seran flexibles ya que se acoplaran al tamaño del contenedor padre.

2) Propiedades Principales:

2.1) Display-Flex: Por defecto si tengo elementos en un contenedor y a este le doy DISPLAY-FLEX, los elementos acoplaran su tamaño para ocupara el 100% del contenedor, ya sea agrandando o achicando el contenido hijo para adaptarlo al 100% del contenedor padre. Por esto decimos que son cajas flexibles, porque se adaptan al tamaño del padre.

2.2) Flex-Direction: Esta propiedad me permite cambiar el acomodado de las cajas, como va ser su orientacion. Las cajas se pueden acomodar horizontalmente (filas) o verticalmente (columnas). Segun la direccion, cambiara la forma de alinear el contenido.

2.3) Flex-Wrap: Esta propiedad me permite trabajar con el desbordamiento, basicamente decirle si queremos que se produzca un salto de linea en el momento en que el contenido tienda a desbordarse. Cuando hablamos de desborde en Flex basicamente es cuando nuestras cajas reducen su tamaño para adaptarse al contenido padre.

2.4) Flex-Flow: Es un atajo de las propiedades Direction y Wrap.


3) Alineacion en Flex: Para trabajar con alineacion en flex debo tener un concepto claro. Debo saber cual es mi eje principal y cual es mi eje secundario. A mi eje principal lo defino con flex-direction, si es row, mi eje principal sera el EJE X y el secundario el EJE Y. Con el direction en column pasaria lo opuesto, el EJE Y seria el principal y el EJE X el secundario. Saber cual es el eje primario y secundario es importante debido a que en base a ellos trabajare con la alineacion en flex.

3.0.1) Propiedades de Alineacion:

3.1) Justify-Content: Esta propiedad se encargara de la alineacion del eje principal.

3.2) Align-Items: Esta propiedad se encargara de la alineacion del eje secundario. 

3.3) Align-Content: Esta propiedad me permitira alinear en el eje secundario, pero centrara las multiples lineas que se generaron con flex-wrap. Basicamente se utiliza para centrar las multiples lineas generadas al usar WRAP. Es complementaria con Align-Items, ya que Align-Items se encargara de la alineacion de los elementos en una linea y Align-Content de la alineacion de esas lineas en conjunto.

.container__padre{
    /* APLICAR FLEXBOX */
    display: flex;

    /* DIRECCIONAMIENTO */
    flex-direction: row; /* El valor por defecto es row */
    flex-direction: row-reverse;
    flex-direction: column;
    flex-direction: column-reverse;


    /* DESBORDE */
    flex-wrap: nowrap; /* Por defecto, esta mantendra el contenido en una sola linea siempre */
    flex-wrap: wrap; /* Esta ante el desborde hara un salto de linea */


    /* ShortHand de Direction y Wrap */
    flex-flow: row wrap;


    /* ALINEACION EN UNA LINEA */

    /* Alinear Eje Principal */
    justify-content: flex-start; /* Alinea los elementos al inicio del Eje principal del contenedor Flex */
    justify-content: flex-end; /* Alinea los elementos al final del Eje principal del contenedor Flex */

    justify-content: center; /* Alinea los elementos al centro del Eje principal del contenedor Flex */
    justify-content: space-around; /* Separa mis elementos con espacios exactos */
    justify-content: space-between; /* Separa mis elementos lo maximo posible */
    justify-content: space-evenly; 


    /* Alinear Eje secundario */
    align-items: flex-start; /* Alinea los elementos al inicio del Eje secundario del contenedor Flex */
    align-items: flex-start; /* Alinea los elementos al final del Eje secundario del contenedor Flex */

    align-items: stretch; /* Es un valor por defecto de Flex, su función es estirar los ítems del contenedor a lo largo del eje 
                             secundario (comunmente Y). Solo estirara los hijos si estos no tienen una altura definida */

    align-items: center; /* Alinea los elementos al centro del Eje secundario del contenedor Flex */


    /* ALINEACION CON VARIAS LINEAS (La usar wrap) */
    align-content: center;      /* Alineara todas las lineas generadas por WRAP al centro, alinea el eje secundario */
    align-content: flex-start;  /* Alineara todas las lineas generadas por WRAP al inicio, alinea el eje secundario */
    align-content: flex-end;    /* Alineara todas las lineas generadas por WRAP al final, alinea el eje secundario */
    align-content: space-around;    /* Alineara todas las lineas generadas por WRAP con espacios iguales, alinea el eje secundario */
    align-content: space-between;   /* Alineara todas las lineas generadas por WRAP con el maximo espacio posible, alinea el eje secundario */
    align-content: space-evenly;
}


3.0.2) Alineacion Individual: Las propiedades que vimos antes nos permiten alinear todo el contenido en conjunto. Pero tambien existen propopiedades en flex que nos permiten alinear a cada elemento donde queramos. Es decir que ademas de alinear al padre y el contenido padre en conjunto, tambien podemos alinear donde queramos sus hijos.


.contenedor__padre{
    display: flex;
    flex-flow: row wrap;
    justify-content: center;
    align-items: center;
}


.contenedor__hijo{
    align-self: flex-start; /* Se alineara al principio del padre en el eje secundario */
    align-self: flex-end; /* Se alineara al final del padre en el eje secundario */
    align-self: center; /* Se alineara al centro del padre en el eje secundario */
    align-self: stretch;
}


4) Ordenar Elementos: Con la propiedad ORDER puedo definir el orden en el que se acomodaran mis elementos flex. Los de mayor valor se colocaran al final y los de menor valor al inicio.

.flex-container{
    display: flex;
}
items:nth-child(1){
    order: 4;
}
items:nth-child(2){
    order: 3;
}
items:nth-child(3){
    order: 2;
}
items:nth-child(4){
    order: 1;
}


5) Tamaños relativos: Con flex podemos definir tamaños relativos para cada hijo individualmente. Estas propiedades buscan definir como estos se comportaran al cambiar de tamaño el contenedor y por ende su tamaño.

5.1) Flex-Grow: Le dice al ítem cuánto debería crecer en relación con los demás para llenar el espacio disponible en el contenedor. Basicamente, si en el contenedor queda espacio sin ocupar por mis elementos, flex-grow reparte ese espacio entre los ítems según el valor que tengan asignado.
flex-grow solo actúa si hay espacio libre en el eje principal.

.flex-container{
    display: flex;
}

items:nth-child(1){
    flex-grow: 1; /* Crecera normalmente*/
}

items:nth-child(2){
    flex-grow: 2; /* Crecera el doble de su tamaño */
}

items:nth-child(3){
    flex-grow: 0; /* directamente no Crecera, valor por defecto  */
}


5.2) Flex-Shrink: Funciona igual que Grow pero a la inversa, definira cuando falte espacio en el contenedor la proporcion de cuanto se achicara cada elemento.

5.3) Flex-Basis: Define el tamaño/ancho minimo de un elemento Flex, esto lo hace con las unidades de medidas.

.flex-container{
    display: flex;
}

items:nth-child(1){
    flex-basis: 200px; /* Esto le dira al hijo que su tamaño minimo seran 200px */
}


5.4) Flex: Esta propiedad es un shorcut de las 3 anteriores. Primero definire el Grow, Shrink y el Basis

.flex-container{
    display: flex;
}

items:nth-child(1){
    flex: 10 5 200px; /* Grow, Shrink, Basis */
}


                                                                7) Grid Layout

1) Grid Layout: Con Grid podremos crear layouts complejos, sin utilizar cajas flexibles ni posicionamiento. Grid trabaja con un sistema de filas y columnas, en las cuales les especificare tamaños maximos y minimos.  


2) Propiedades y Funciones Principales:

2.1) Display-Grid: Esta propiedad permitira desplegar mi elementos en forma de grilla. Por defecto, sin utilizar otra propiedad esto no hara nada, ya que debo definir filas y columnas.


2.2) Grid-Template-Columns:  Esta propiedad me permitira definir cuantas columnas quiero tener, pero no de forma explicitas (1, 2, 3 columnas), sino definiendo el tamaño de cada columna, segun cuantos tamaños defina seran mi cantidad de columnas. Generalmente los valores no se trabajan con pixeles, sino con FR (fracciones), para tener un diseño responsive. Las columnas modificaran el ancho de mis cajas.


2.3) Grid-Template-Rows: Su funcionamiento es igual a columns pero para las filas. Las filas modificaran el alto de mis cajas. El valor auto hara que esa fila debe tener la altura mínima necesaria para contener su contenido, solo el alto que necesite su contenido, ni más ni menos.


2.4) Grid-Template: Viene a ser un shorcut de las 2 propiedades anteriores.


2.5) Gap: Esta propiedad me permite dar una separacion entre los elementos de mi grid


2.6) Repeat(): Es una funcion que busca simplificar y facilitar la inicializacion tanto de filas como columnas. El primera parametro sera la cantidad de filas/columnas y el segundo el tamaño.


2.7) MinMax(): Me permite darle un valor minimo y maximo a una fila y/o columna.


.grid{
    /* PASo 1: Seteo mi contenedor en formato de grilla  */
    display: grid;

    /* PASO 2: Defino las filas y columnas */
    /* Las columnas definiran el ancho y las filas el alto */

    /* A la hora de trabajar con columnas generalmente no las definimos con pixeles, sino con fracciones, para lograr Responsive */
    /* Si quiero que una columna sea mas grande que otra le definire una mayor fr. */
    grid-template-columns: 1fr 3fr 1fr; 
    grid-template-rows: 1fr 1fr 1fr; 

    /* SHORCUT: Definir Filas y Columnas */
    grid-template: 1fr 1fr 1fr /  1fr 3fr 1fr; /* fila / columna */


    /* PASO 3: SEPARACION DE ELEMENTOS */
    gap: 10px;


    /* INICIALIZACION CON FUNCION REPEAT() Y FUNCION MINMAX() */
    /* Luego del repeat tambien puedo seguir agregando mas columnas si quiero */
    grid-template-columns: repeat(5, minmax(100px, 1fr)) 2fr; /* El primer valor es la cantidad de columnas y el segundo su tamaño */
    grid-template-rows: repeat(3,  minmax(150px, 1fr)); 
    grid-template-rows: auto; /* Le dice al navegador que esa fila debe tener la altura mínima necesaria para contener su contenido. */
}


3) Posicionamiento de elementos: Para posicionar elementos grid debemos entender como estos funcionan. En grid el posicionamiento se define por posicion de inicio del elemento y posicion final de este, Por EJ el primer elemento empieza en la linea 1 y termina en la linea 2, el segundo empieza en la linea 2 hasta la 3 y asi. Mediante el inspector podemos activar el modo grid para que nos facilite ver la numeracion de cada posicion.
Una vez entendido como funciona el posicionamiento en grid lo manipularemos con las siguientes propiedades:


3.1) Grid-Column-Start: Me permite definir la posicion de inicio de una columna en especifico.

3.2) Grid-Column-End: Me permite definir la posicion de final de una columna en especifico.

3.3) Grid-Row-Start: Me permite definir la posicion de inicio de una fila en especifico.

3.4) Grid-Column-End: Me permite definir la posicion de final de una fila en especifico.

3.5) Grid-Column: Es un shorcut que me permite definir el column-start y column-end en una sola propiedad.

3.5) Grid-Row: Es un shorcut que me permite definir el row-start y row-end en una sola propiedad.

.grid{
    display: grid;

    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(3, 1fr);
    gap: 20px;
}

.grid div:first-child{
    background-color: pink;

    /* Posicionar Elemento */
    grid-column-start: 3;
    grid-column-end: 4;
    grid-row-start: 2;
    grid-row-end: 3;

    /* 1º Shorcut Para definir Las Columnas y Filas*/
    grid-column: 1 / 5;
    grid-row: 2 / 3;

    /* 2º Shorcut: Expandir columnas y filas */
    grid-column: span 3;
    grid-row: span 3;
}


4) Grid-Templates-Areas: Esta herramienta nos permite maquetar nuestro contenido de una forma mas sencilla. Aunque tambien lo podria hacer mediante el start y end de mis columns y rows, grid-template-areas viene a facilitar esto. Basicamente con este propiedad puedo crear una plantilla directamente jugando con los nombres de las cajas de mi contenedor grid.

Para que esto funcione debo definirle a cada caja de mi grid la palabra reservada que le corresponde para que esta se acomode. Para definir la palabra clave usare la propiedad grid-area

.grid{
    display: grid;
    gap: 20px;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(5, 1fr);

    /* La cantidad de header seran la cantidad de columnas que tengo, tambien debere respetar mi numero de filas */
    grid-template-areas: "header header header"
                        "contenido contenido aside"
                        "contenido contenido aside"
                        "widget1 widget2 aside"
                        "footer footer footer";
}

.grid .header{
    background-color: gray;
    
    /* Le asigno su referencia */
    grid-area: header;
}

.grid .aside{
    background-color: orange;

    /* Le asigno su referencia */
    grid-area: aside;
}

.grid .contenido{
    background-color: #FFF;
    color: #000;
    border: none;

    /* Le asigno su referencia */
    grid-area: contenido;
}

.grid .widget1{
    background-color: greenyellow;
    /* Le asigno su referencia */
    grid-area: widget1;
}

.grid .widget2{
    background-color: greenyellow;
    /* Le asigno su referencia */
    grid-area: widget2;
}

.grid .footer{
    background-color: #3a3a3a;
    /* Le asigno su referencia */
    grid-area: footer;
}


5) Alinear Elementos en grid:

5.1) justify-items: Esta propiedad me permitira manipular la alineacion del contenido de grid en el EJE X.

5.2) align-items: Esta propiedad me permitira manipular la alineacion del contenido de grid en el EJE Y.

5.3) justify-self: Esta propiedad me permitira manipular la alineacion de un elemento de mi grid en el EJE X.

5.4) align-self: Esta propiedad me permitira manipular la alineacion de un elemento de mi grid en el EJE Y.

.grid{
    display: grid;
    gap: 20px;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 200px);

    /* Alineacion Horizontal - EJE X */
    justify-items: start; /* El contenido se colocara al inicio de mi columna */
    justify-items: end;  /* El contenido se colocara al final de mi columna  */
    justify-items: center; /* El contenido se colocara al centro de mi columna */
    justify-items: stretch; /* Es el valor por defecto, lo que hace estirar mi elemento por todo el contenedor */


    /* Alineacion Vertical - EJE Y */
    align-items: start;
    align-items: end;
    align-items: center;
    align-items: stretch; /* Es el valor por defecto */
}

.grid .item{
    background-color: violet;

    /* EJE X */
    justify-self: start;
    justify-self: end;
    justify-self: center;
    justify-self: stretch;

    /* EJE Y */
    align-self: start;
    align-self: end;
    align-self: center;
    align-self: stretch;
}


5.5) Alineacion Multilinea: Cuando hablamos de Multilinea nos referimos a la alineacion del contenido de grid, a la alineacion 
de su contenido:

.grid{
    display:grid;
    gap: 20px;
    height: 1000px;
    grid-template-columns: repeat(3, 200px);
    grid-template-rows: repeat(3, 200px);

    /* ALINEAR CONTENIDO - EJE X */
    justify-content: start;
    justify-content: end;
    justify-content: center;
    justify-content: space-around;
    justify-content: space-between;
    justify-content: space-evenly;

    /* ALINEAR CONTENIDO - EJE Y */
    /* Para poder hacer esta alineacion necesito que el contenedor tenga un tamaño de HEIGHT definido */
    align-content: start;
    align-content: end;
    align-content: center;
    align-content: space-around;
    align-content: space-between;
    align-content: space-evenly;
}


5.6) Centrar un div con Grid y Place-Items: Aunque se recomienda hacerlo con flex, con grid tambien podemos centrar un div:

.container{
    width: 500px;
    height: 500px;
    background: crimson;
    margin: 50px auto;


    /* 1º METODO: FLEXBOX - MAS USADO */
    display: flex;
    justify-content: center;
    align-items: center;

    /* 2º METODO: GRID */
    display: grid;
    justify-content: center;
    align-content: center;

    /* 3º METODO: GRID con place-items */
    display: grid;
    place-items: center center; /* El primera parametro alinea el EJE Y, el segundo el EJE X */
}

.container div{
    width: 100px;
    height: 100px;
    background: #222;
}



6) Order: Esta propiedad me permitira manejar el orden de mis elementos grid.
.grid{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
}

/* A todos mis elemento grid les doy un order 0, valor por defecto, esto los mantendra donde estan, debido a que si tienen 
el mismo order respetaran el posicionamiento que tengan en el html */
.grid div{
    order: 0;
}

/* Al darle este valor a uno de mis elementos grid lo mandara al ultimo lugar, debido a que el resto tienen un order de 0 */
.grid .item{
    order: 1;
}

/* Al darle -1 este se posicionara como el primer elemento */
.grid .item2{
    order: -1;
}


7) Grid Explicita: La grid explicita es aquella grilla que se forme mediante los parametros que defini en columns y rows. En el EJ mi grid Explicita son las 3 filas y columnas que defini.

7.1) Grid Implicita: Cuando las filas y/o columnas no son suficientes para contener todo el contenido, es decir la grid explicita es 
insuficiente para manejar todo el contenido, se crea una Grid Implicita. Para poder manipular esta grid Implicita usabamos la propiedad grid-auto-rows.

.grid{
    display: grid;
    gap: 20px;

    /* DEFINICION DE LA GRID EXPLICITA */
    grid-template-columns: 100px 1fr 100px;
    grid-template-rows: 100px 200px 100px;


    /* MANIPULAR LA DIRECCION DE MI GRID, OBLIGATORIO PARA MANIPULAR GRID IMPLICITA */
    grid-auto-flow: row;     /* Los elementos de mi grid implicito se agregaran en una nueva fila, valor por defecto */
    grid-auto-flow: column; /* Los elementos de mi grid implicito se agregaran en una nueva columna */
    grid-auto-flow: row dense; /* DENSE evitara que haya espacios en blanco vacios */

    /* MANIPULAR GRID IMPLICITA */
    /* Controlás la altura de las filas que se agregan solas, solo funciona con:  grid-auto-flow: row; */
    grid-auto-rows: 1fr; 
    /* Controlás el ancho de las columnas que se agregan solas, solo funciona con:  grid-auto-flow: column; */
    grid-auto-columns: 1fr;
}


8) Auto-Fit y Auto-Fill: Ambas propiedades me permiten crear columnas de forma dinamica. Se usan con la función repeat().

8.1) Auto-Fill: Llena el container grid con la mayor cantidad de columnas posibles, incluso si están vacías. Es útil si querés mantener la estructura fija, aunque no tengas muchos elementos. 

Si entran 5 columnas de 150px, se crean 5 columnas. Si hay solo 2 elementos, los otros 3 espacios quedan vacíos (pero el grid sigue con 5 columnas).
grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));


8.2) Auto-Fit: El grid se adapta al contenido. Si hay solo 2 ítems, el grid se reacomoda con solo 2 columnas visibles.

Si hay solo 2 elementos, se expanden para ocupar el ancho total. Las columnas que no tienen contenido desaparecen.
grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));

| Propiedad   | Columnas vacías | Se adapta al contenido |
| ----------- | --------------- | ---------------------- |
| `auto-fill` | ✅ Sí            | ❌ No                |
| `auto-fit`  | ❌ No            | ✅ Sí                



9) Sub-Grid: subgrid permite que un elemento hijo (que también es un grid) herede el sistema de líneas del grid padre. Es decir: un contenedor hijo puede alinear sus hijos usando las mismas líneas del grid padre (el mismo sistema de columnas y filas definido en el padre).

¿Por qué usarlo?

Si querés que tanto el h2 como el p se alineen con las columnas del grid-padre, no con un grid nuevo dentro de .tarjeta. Con subgrid, eso se puede. Sin subgrid, tenés que repetir el mismo grid-template-columns dentro del hijo, lo cual es engorroso y rompe si cambia el padre.
Con esto, .tarjeta no define sus propias columnas, sino que usa las del padre.

<div class="grid-padre">
    <div class="tarjeta">
        <h2>Título</h2>
        <p>Texto</p>
    </div>
</div>

.grid-padre {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr;
}

.tarjeta {
  display: grid;
  grid-template-columns: subgrid;
  /* grid-template-rows: subgrid; */ => No es necesario en este caso pero se puede usar
}


| Pregunta        | Respuesta                                                  |
| --------------- | ---------------------------------------------------------- |
| ¿Qué hace?      | Hereda las líneas del grid padre.                          |
| ¿Dónde se usa?  | En grids hijos, para `grid-template-columns` o `rows`.     |
| ¿Qué soluciona? | Alineación coherente en grids anidados sin repetir código. |
| ¿Cuándo usarlo? | Cuando querés una grilla común para varios niveles.        |



10) En la maquetacion web se suele trabajar con un grid que divida la pantalla en 12, al igual que hace el grid-layaout de bootstrap. En base a eso decidiremos cuanto espacio/grillas ocupara nuestro contenido


                                                                8) Grid VS Flex

1) Flexbox vs Grid: Generalmente Grid se lo utiliza para maquetar contenido, hacer esqueletos/plantillas complejas. Flexbox en cambio se lo utiliza mas para alinear elementos y manipular su posicion.

| Caso                               | ¿Flex o Grid? |
| ---------------------------------- | ------------- |
| Alinear elementos en fila          | Flexbox       |
| Alinear elementos en columna       | Flexbox       |
| Galería o cuadrícula               | Grid          |
| Layout de página                   | Grid          |
| Contenido variable en tamaño       | Flexbox       |
| Posicionar cosas exactas en celdas | Grid          |



                                                              9) Responsive Design

1) Responsive Design: Es un enfoque o tecnica de diseño web, que busca que una página se adapte automáticamente a distintos tamaños de pantalla (distintas resoluciones). CSS3 Nos brinda varias Herramientas que nos permiten aplicar esta filosofia: 1) Media Queries. 2) Unidades relativas (vh, vw, %). 3) Flexbox y Grid Layout.

2) Etiqueta Meta-viewport: Esta etiqueta HTML es la que permitira aplicar responsive design, sin esta no podria aplicar el resto de tecnicas para implementar RD. Sin esta etiqueta mis elementos no respetarian sus tamaños originales sino que escalarian arbitrariamente con la pantalla.

3) Unidades de Medida Resonsive: Para trabajar con unidades de medidas responsive tenemos 3 pasos: 1) Aplicar unidades de porcentajes para mis contenedores, es decir en vez de utilizar PX para definir el tamaño de un contenedor utilizo % o VH. 2) Aplicar un Max-Width, esto limita que tanto va a crecer un elemento en pantallas muy grandes. 3) Aplicar VMAX, VMIN y VW en los textos (opcional), la ventaja del VMIN es que siempre voy a saber cual va a ser su maximo y de ahi siempre decrecera.

/* APLICANDO MAX-WIDTH */
.contenedor{
    width: 100%;
    max-width: 1200px;
    margin: auto;
    background: #ccc;
    padding: 10px;
    height: 100vh;
}

/* APLICANDO VMIN */
.contenido h1{
    font-size: 9vmin;
    text-transform: uppercase;
}
.contenido p{
    font-size: 2.5vmin;
    text-align: center;
}


4) Media Query: Los Media Query son una especie de regla/condicional que segun cierto tamaño de pantalla o resolucion aplicara otros estilos a los elementos.
/* Aplicara estilos a pantallas que tengan como maximo 992px de ancho, LA FORMA MAS USADA */
@media screen and (max-width: 992px){

}

/* Aplicara estilos a pantallas que tengan como maximo 992px de ancho y tengan como minimo 576px */
@media screen and (max-width: 992px) and (min-width: 576px){

}

4.1) Crear un DarkMode con Media-Queries:
@media (prefers-color-scheme: dark){

}

                                                                 10) SASS

1) SASS: Es el preprocesador de CSS por excelencia, nos permite darle a CSS caracterisiticas de un lenguaje de programacion y hacer mas eficiente el codigo. Extiende CSS con funciones como arrays, mixins, anidamiento, condicionales, etc.

Un preprocesador de CSS es una herramienta que permite escribir pseudocodigo CSS que luego sera compilado y convertido en CSS. Esta formado por elementos habituales de cualquier lenguaje de programacion (arrays, ciclos, condicionales).

1.1) Instalacion: Para instalarlo debemos hacerlo en un proyecto existente: 1) npm init -y  2) npm install -g sass   3) Crearemos nuestro archivo de estilos CSS y SASS. 4) Con el siguiente comando pasaremos lo escrito en sass a css: sass --watch scss:css


2) Sintaxis Basica: 1) Variables. 2) Anidamiento de Selectores. 3) Anidamiento de Propiedades.

// VARIABLES:
$colorFondo: #CCC;
$colorPrincipal: crimson;

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}


body{
    // USAMOS LA VARIABLE
    background-color: $colorFondo;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

// ANIDAMIENTO DE SELECTORES
.articulo{
    width: 500px;
    height: 400px;
    background-color: #FFF;
    padding: 20px;
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    border: 2px $colorPrincipal solid;
    transition: all .5s;


    .titulo{ // En CSS equivale a: .articulo .titulo{}
        color: $colorPrincipal;
        
        // ANIDAMIENTO DE PROPIEDADES
        font: {
            size: 35px;
            weight: 500;
            style: italic;
        }

        text: {
            align: center;
            transform: uppercase;
            shadow: 0 0 5px rgba(#000, .5);
        }
    }

    p{ // En CSS equivale a: .articulo p
        line-height: 20px;
        font-size: 18px;
        text-align: justify;
        margin: 10px 0;
    }

    // DE ESTA FORMA ACCEDO A LAS PSEUDOCLASES
    &:hover{
        background-color: $colorPrincipal;
        color: #FFF;
        box-shadow: 0 0 15px 5px rgba($colorPrincipal, .5);

        // De esta forma selecciono que elemenentos manejar en un hover
        .titulo{
            color: #FFF;
        }
    }
}


3) Operaciones: SASS al ser un lenguaje de programacion me permite trabajar con suma, resta, multiplicacion y division. En CSS esto solo lo puedo hacer utilizando calc(). El unico inconveniente es que operaciones con distintas unidades de medida si necesitaran calc:

// OPERACIONES - Solo puedo operar entre unidades iguales
.container{
    width: 600px;
    margin: 0 auto;

    section{
        float: left;
        // SUMA
        width: 200px + 200px;
        height: calc(400px - 5vh); // Para operar con diferentes unidades debo usar calc() al igual que CSS.
        // DIVISION - De esta forma calcularemos el porcentaje a ocupar de forma inteligente
        width: 400px / 600px * 100%;
        background-color: #222;
    }

    aside{
        float: left;
        // RESTA
        width: 400px - 200px;
        // MULTIPLICACION
        height: 200px * 2;
        // DIVISION - De esta forma calcularemos el porcentaje a ocupar de forma inteligente
        width: 200px / 600px * 100%;
        background-color: orangered;
    }
}


4) Mixins: Los mixins son como funciones reusables para CSS. Te permiten definir bloques de estilos con parámetros opcionales, que podés "invocar" en cualquier selector sin copiar y pegar el mismo código. Es decir, si tengo texto a los cuales les defino las mismas propiedades pero diferentes valores, los mixins seran utiles.

Beneficios: 1) Evitan repetición de código. 2) Permiten usar parámetros dinámicos (como colores, tamaños, bordes, fonts). 3) Facilitan estilos condicionales o variantes

// MIXIN - FUNCIONES
@mixin estilosText($color, $fontSize, $fontWeight){
    font-size: $fontSize;
    color: $color;
    font-weight: $fontWeight;
    text-transform: uppercase;
    text-align: center;
}

.articulo{
    width: 500px;
    margin: 50px auto;
    padding: 40px;
    border: 1px solid #ccc;

    h1{
        @include estilosText(lightseagreen, 40px, 500);
    }

    h2{
        @include estilosText(lightskyblue, 30px, 600);
    }
}


5) Listas - Arrays: Al igual que muchos lenguajes de programacion SASS me permite crear ARRAYS

// LISTAS - ARRAYS
$colores: blue, red, green, yellow, orange, pink;
$colores2: black, white;

// ACCEDER A UN ELEMENTO DEL ARRAY
h1{
    color: nth($list: $colores, $n: 1); 
}

// COMBINAR ARRAYS
$coloresTotales: join($list1: $colores, $list2: $colores2, $separator: comma);

// AGREGAR ELEMENTOS AL ARRAY
$colores: append($colores, orangered, comma);

h1{
    color: nth($list: $colores, $n: 7); 
}


6) Mapas: Los mapas en SASS vienen a ser objetos:

// MAPS - OBJECTS
$titulos: (
    h1: 50px,
    h2: 30px,
    h3: 20px,
    h4: 15px,
    h5: 10px
);

$colores: (
    azul: blue,
    rojo: red,
    verde: green
);


// ACCEDER A PROPIEDADES DE MAPS
h1{
    // DEFINO EL OBJETO Y LA PROPIEDAD A LA QUE QUIERO ACCEDER
    font-size: map-get($map: $titulos, $key: h1);
    color: map-get($map: $colores, $key: azul);
}


// FUSIONAR OBJETOS - MAPS
$titulosColores: map-merge($map1: $titulos, $map2: $colores);

h1{
    font-size: map-get($map: $titulosColores, $key: h1);
    color: map-get($map: $titulosColores, $key: rojo);
}

// ELIMINAR ELEMENTOS DE UN MAP
$nuevoTitulo: map-remove($map: $titulos, $keys: h1, h2)



7) Modulos: SASS me permite trabajar en varios archivos diferentes, varios modulos, y luego fusionarlos en un solo archivo. Esto me permite tener un codigo mas organizado por secciones y no tener una sola hoja de estilos super extensa.

Para Evitar que al crear un nuevo archivo de .scss se genere un archivo .css lo que debo hacer es nombrar al archivo de SASS con un "_", de esta forma no generara un archivo .css. Para importar el modulo debo usar la directiva @import "" en el .scss principal:

@import "other";


8) Extend: Extend viene a cumplir la funcion de la herencia, busca extender codigo y permitir la reutilizacion del mismo. Esto evita tener que repetir lineas de codigo iguales para distintos elementos.

.contenedor{
    display: inline-block;
    width: 300px;
    border: 1px solid #000;
    padding: 40px;
    margin: 10px;
}

.contenedor-red{
    @extend .contenedor;
    background-color: crimson;
}

.contenedor-blue{
    @extend .contenedor;
    background-color: lightblue;
}

.contenedor-green{
    @extend .contenedor;
    background-color: lightgreen;
}


9) Condicionales:

// CONDICIONALES
$color: verde;
h1{
    @if ($color == azul) {
        color: blue;
    } 
    @else if($color == verde){
        color: green;
    }
    @else{
        color: red;
    }
}

// CONDICIONAL EN FUNCIONES
@mixin condicional($color){
    background: $color; // El objeto que use este Mixin tendra el color del Background del parametro

    @if($color == red){
        border: 5px solid #740000;
    }
    @else if($color == blue){
        border: 5px solid #000874;
    }
}



10) Bucles:

// CICLO FOR
@for $i from 1 through 6{
    // Interpolacion, creo selectores dinamicos, este selector sera h1, h2, h3, h4, h5 y h6 
    h#{$i}{
        color: red;
        font-size: $i * 10px;
    }
}


// CICLO WHILE
$i: 6;
@while ($i > 0){
    h#{$i}{
        font-size: 20px * $i ;
    }
    $i: $i - 1;
}


// EACH - Este ciclo me permite recorrer ARRAYS, los elementos de este array son TUPLAS
$colores: (#0000ff, azul), (#ff1100, rojo), (#09ff00, verde), (#000, negro); // ARRAY

// $color - $nombre, me permite destructurar los valores de las TUPLAS
@each $color, $nombre in $colores{
    // Creo dinamicamente selectores de text (text-azul, text-rojo)
    .text-#{$nombre}{
        color: $color;
    }
} 


// EJEMPLO DE USO
.box{
    width: 200px;
    height: 200px;
    display: inline-block;
    border: 1px solid #ccc;
}

@for $i from 1 through 20{
    .box:nth-child(#{$i}){
        background-color: #00061A;
    }
}



11) Media-Query con SASS: SASS me permite crear media-queries de forma mas dinamica. Al poder utilizar funciones y variables podemos utilizar la escritura de estos Media-Query.

// MEDIA-QUERY EN SASS
$desktop: "(max-width: 1024px)";
$tablets: "(max-width: 768px)";
$phone: "(max-width: 576px)";

@mixin desktop{
    @media screen and #{$desktop}{
        @content; // @content permitira editar el contenido de esta funcion
    }
}

@mixin tablets{
    @media screen and #{$tablets}{
        @content; // @content permitira editar el contenido de esta funcion
    }
}

@mixin phone{
    @media screen and #{$phone}{
        @content; // @content permitira editar el contenido de esta funcion
    }
}

p{
    font-size: 80px;
    color: lightseagreen;

    @include desktop(){
        font-size: 60px;
        color: crimson;
    }

    @include tablets(){
        font-size: 40px;
        color: greenyellow;
    }

    @include phone(){
        font-size: 20px;
        color: #000;
    }
}




                                                               11) Bootstrap

1) Bootstrap: Es el framework de CSS3 mas utilizado para crear paginas web. Un framework de CSS3 es codigo de CSS ya desarrollado/creado y que lo reutilizo mediante clases que le agrego a mis elementos.




                                                                X) Ejercicios

1) Skew para deformar cabecera - Video 82: 

.skew-box{
    background-color: #edff57;
    padding: 100px 0;
    transform: skew(0deg, -5deg) translateY(-100px);
}

.container{
    padding: 150px 200px;
    transform: skew(0deg, 5deg)
}

<section class="skew-box">
    <div class="container">
        <h1>Bienvenidos a nuestra web</h1>
        <p>TEXTO</p>
    </div>
</section>

2) Cards con Transforms - Video 83:

.box{
    position: relative;
    width: 360px;
    height: 620px;
    margin: 0 auto;
    transform: rotate(-30deg) skew(25deg) scale(0.6);
}

.layer{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #222;
    transition: all .5s;
}

.box:hover .layer:nth-child(4){
    transform: translate(160px,-160px);
}

.box:hover .layer:nth-child(3){
    transform: translate(120px,-120px);
    opacity: .8;
}

/* Asi con el resto de hijos */


3) Cards Con Efectos 3d - Video 84:

.box{
    position: absolute;
    /* Forma antigua de centrar el contenido */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

    width: 500px;
    height: 400px;
    transition: all .5s;
    perspective: 2000px;
    transform-style: preserve-3d;
}

.box::before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: transparent;
    border-top: 20px solid #FFF;
    border-left: 20px solid #FFF;

    /* Mi selector * no contempla a los pseudoelementos por ello debo volver a poner border-box aqui */
    box-sizing: border-box;
}

.box::after{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: transparent;
    border-right: 20px solid #FFF;
    border-bottom: 20px solid #FFF;

    /* Mi selector * no contempla a los pseudoelementos por ello debo volver a poner border-box aqui */
    box-sizing: border-box;
}

.box:hover{
    transform: translate(-50%, -50%) rotateY(-30deg) skew(5deg);
}

.text{
    position: absolute;
    top: 30px;
    left: -40px;
    background-color: #262626;

    /* Con esto hago que mi contenido se desborde a posta */
    width: calc(100% + 80px);
    height: calc(100% - 60px);
    transition: all .5s;
}

.text:hover{
    transform: rotateY(30deg) skew(-5deg);
}

.text div {
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    transform: translateY(-50%);
    padding: 40px 80px;
    text-align: center;
    z-index: 1;
}

.text div h1, .text div p{
    margin: 0 0 20px;
    color: #fff;
}

.text div p{
    font-size: 18px;
}

i{
    width: 80px;
    height: 80px;
    background-color: #FFF;
    color: #262626;
    text-align: center;
    line-height: 80px !important;
    font-size: 40px;
}

i.fa1{
    position: absolute;
    top: 0;
    left: 0;
}

i.fa2{
    position: absolute;
    bottom: 0;
    right: 0;
    z-index: 5;
}


// HTML
<div class="box">
    <i class="fa2 fas fa-quote-left"></i>
    <div class="text">
        <i class="fa1 fas fa-quote-right"></i>
        <div>
            <h1>Nota del dia</h1>
            <p>TEXTO.</p>
        </div>
    </div>
</div>

4) Foto Semi-Circular con Clip-Path - Video 87:

body{
    height: 150vh;
}

section{
    position: relative;
    width: 100%;
    height: 100vh;
    background-image: url(img/background10.jpg);
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    clip-path: circle(150vh at 50% -50vh);
}

// HTML
<section></section>


5) Boton Doble con Clip-Path - Video 88:

div{
    width: 200px;
    margin: 300px auto;
}

a{
    position: relative;
    display: inline-block;
    width: 150px;
    height: 50px;
    box-shadow: 0 5px 25px rgba(0, 0, 0, 0.25);
}

a span{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    color: #FFF;
    background-color: #6c4ba5;
    text-align: center;
    line-height: 50px;
    text-transform: uppercase;
    font-size: 18px;
    letter-spacing: 2px;   
}


a span:nth-child(2){
    color: #6c4ba5;
    background-color: #FFF;
    clip-path: polygon(0% 0%, 36% 0, 62% 51%, 36% 99%, 0% 100%);
    transition: all .5s;
}

a span:nth-child(2):hover{
    clip-path: polygon(0% 0%, 100% 0, 100% 50%, 100% 100%, 0% 100%);
}

/* Con esto digo que cuando al primer Span le haga Hover, seleccione su hermano adyacente */
a span:nth-child(1):hover ~ span{
    clip-path: polygon(100% 0, 100% 0, 100% 50%, 100% 100%, 100% 100%);
}


// HTML
<div>
    <a href="#">
        <span>Boton</span>
        <span>Boton</span>
    </a>
</div>


6) Efecto de Carga - Video 90:

h2{
    position: relative;
    margin: 100px;
    font-size: 14vw;
    color: #252839;
    -webkit-text-stroke: 3px #383d52;
    text-transform: uppercase;
}

h2::before{
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;

    /* El Width manejara el efecto del relleno */
    width: 0;
    height: 100%;
    color: #327f9d;

    /* Elimino los bordes */
    -webkit-text-stroke: 0px #383d52;
    border-right: 2px solid #327f9d;

    /* Overflow Hidden ocultara el relleno del texto del before y con este jugaremos para el efecto de carga */
    overflow: hidden;
    animation: loading 2s linear infinite alternate running;
}

@keyframes loading{
    0%{
        width: 0;
    }
    100%{
        width: 95%;
    }
}


// HTML
<h2 data-text="Loading...">Loading...</h2>


7) Loader - Video 92:

.loader{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(45deg);
    width: 170px;
    height: 170px;
    border: 10px solid #1db5c9 ;

    display: flex;
    flex-wrap: wrap;
    border-radius: 10px;
}

span{
    width: 50px;
    height: 50px;
    background: #0e7d8b;
    animation: animate 2s linear infinite;
}

span:nth-child(1), span:nth-child(5), span:nth-child(5){
    animation-delay: 0.4s;
}

span:nth-child(2), span:nth-child(6){
    animation-delay: 0.6s;
}

span:nth-child(3){
    animation-delay: 0.8s;
}

span:nth-child(4), span:nth-child(8){
    animation-delay: 0.2s;
}

span:nth-child(7){
    animation-delay: 0s;
}


@keyframes animate{
    0%{
        transform: scale(1);
    }

    30%{
        transform: scale(0);
    }

    50%{
        transform: scale(0);
    }

    70%{
        transform: scale(1);
    }

    100%{
        transform: scale(1);
    }
}


// HTML
<div class="loader">
    span*9
</div>


8) Fondo Estrellado:

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}   

body{
    width: 100%;
    height: 100vh;
    background: url(img/background11.jpg);
    background-size: cover;
    background-position: center center;
    overflow: hidden;
}  

span{
    position: absolute;
    top: 50%;
    left: 50%;
    width: 4px;
    height: 4px;
    background-color: #FFF;
    border-radius: 50%;
    box-shadow: 0 0 0 4px rgba(255, 255, 255, 0.1),
                0 0 0 8px rgba(255, 255, 255, 0.1);

    animation: animate 3s linear infinite;
}


span::before{
    content: '';
    position: absolute;
    width: 300px;
    height: 1px;
    background: linear-gradient(90deg, #FFF, transparent);
}

@keyframes animate {
    0%{
        transform: rotate(315deg) translateX(0);
        opacity: 1;
    }

    70%{
        opacity: 1;
    }

    100%{
        transform: rotate(315deg) translateX(-1000px);
        opacity: 0;
    }
}


span:nth-child(1){
    top: 0;
    right: 0;
    /* Le valor initial me permite reiniciar el valor del 50% que tenia originalmente el span */
    left: initial;
    animation-delay: 0;
    animation-duration: 1s;
}

span:nth-child(2){
    top: 0;
    right: 80px;
    left: initial;
    animation-delay: 0.2s;
    animation-duration: 3s;
}

span:nth-child(3){
    top: 80px;
    right: 0;
    left: initial;
    animation-delay: 0.6s;
    animation-duration: 1.5s;
}

span:nth-child(4){
    top: 0;
    right: 180px;
    left: initial;
    animation-delay: 0.4s;
    animation-duration: 2s;
}

span:nth-child(5){
    top: 0;
    right: 400px;
    left: initial;
    animation-delay: 0.8s;
    animation-duration: 2.5s;
}

span:nth-child(6){
    top: 0;
    right: 600px;
    left: initial;
    animation-delay: 1s;
    animation-duration: 3s;
}

span:nth-child(7){
    top: 300px;
    right: 0;
    left: initial;
    animation-delay: 1.2s;
    animation-duration: 1.75s;
}

span:nth-child(8){
    top: 0;
    right: 700px;
    left: initial;
    animation-delay: 1.4s;
    animation-duration: 1.25s;
}

span:nth-child(9){
    top: 0;
    right: 1000px;
    left: initial;
    animation-delay: 0.75s;
    animation-duration: 2.25s;
}

span:nth-child(10){
    top: 0;
    right: 450px;
    left: initial;
    animation-delay: 2.75s;
    animation-duration: 2.25s;
}


// HTML
span*10


9) Menu Vertical con transiciones:
<ul>
    <li>
        <a href="#">
            <span>Inicio</span>
            <span>Inicio</span>
        </a>
    </li>

    <li>
        <a href="#">
            <span>Nosotros</span>
            <span>Nosotros</span>
        </a>
    </li>

    <li>
        <a href="#">
            <span>Productos</span>
            <span>Productos</span>
        </a>
    </li>

    <li>
        <a href="#">
            <span>Servicios</span>
            <span>Servicios</span>
        </a>
    </li>

    <li>
        <a href="#">
            <span>Contacto</span>
            <span>Contacto</span>
        </a>
    </li>
</ul>

ul{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    list-style-type: none;
}

ul li{
    position: relative;
    margin: 5px;
}

ul li a{
    position: relative;
    height: 40px;
    display: block;
    text-decoration: none;
    padding: 5px 10px;
    margin: 20px 0;
    font-weight: 300;
    letter-spacing: 2px;
    overflow: hidden;
}

ul li a::before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #ec333f;
    transform: scaleX(0);
    transition: transform .5s;
}

ul li a:hover::before{
    transform: scaleX(1);
    transition-delay: .5s;
    transform-origin: left;
}

ul li a span{
    position: relative;
    width: 100%;
    height: 100%;
    display: block;
    color: #FFF;
    text-align: center;
    font-size: 20px;
    transition: transform .5s;
}

ul li a:hover span:nth-child(1){
    transform: translateY(-100%);
}

ul li a:hover span:nth-child(2){
    transform: translateY(-100%);
}


10) Profesional Card:

<div class="card">
    <div class="img">
        <img src="img/profile.jpg" alt="">
    </div>
    <h2>Lorem Ipsum<br><span>Frontend web developer</span></h2>
    <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Velit nostrum dicta iure ipsum, at, rem voluptas expedita nulla assumenda maxime.</p>
    <ul>
        <li><a href="#" class="fab fa-facebook-f"></a></li>
        <li><a href="#" class="fab fa-twitter"></a></li>
        <li><a href="#" class="fab fa-instagram"></a></li>
        <li><a href="#" class="fab fa-youtube"></a></li>
        <li><a href="#" class="fab fa-linkedin-in"></a></li>
    </ul>
</div>

.card{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 300px;
    background-color: #FFF;
    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.2);
    border-radius: 10px;
    text-align: center;
    padding: 40px;
    transition: all .5s;
}


.card:hover{
    box-shadow: 0 40px 70px rgba(0, 0, 0, 0.6);
}

.img{
    width: 120px;
    height: 120px;
    margin: 0 auto;

    /* Con esto redondeo el contenedor y tapo los sobresalientes cuadrados de mi img */
    border-radius: 50%;
    overflow: hidden;
}

.img img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
}


h2{
    font-size: 20px;
    color: #262626;
}

span{
    font-size: 14px;
    background: #406ff0;
    color: #FFF;
    padding: 5px 10px;
    border-radius: 15px;
}


p{
    color: #262626;
    margin: 20px 0;
}

ul{
    list-style: none;
    display: flex;
    justify-content: space-evenly;
}


ul li a{
    text-decoration: none;
    text-align: center;
    color: #aaa;
    margin: 0 10px;
    font-size: 18px;
    transition: color .5s, transform .8s;
}


ul li a:hover{
    color: #406ff0;
    transform: rotateY(360deg);
}



11) Slider:
<div class="container">
    <div class="slider">
        <div id="slide1">
            <img src="img/image1.jpg"/>
        </div>

        <div id="slide2">
            <img src="img/image2.jpg"/>
        </div>

        <div id="slide3">
            <img src="img/image3.jpg" alt="">
        </div>

        <div id="slide4">
            <img src="img/image4.jpg" alt="">
        </div>

        <div id="slide5">
            <img src="img/image5.jpg" alt="">
        </div>
    </div>

    <ul class="menu">
        <li>
            <a href="#slide1">1</a>
        </li>
        
        <li>
            <a href="#slide2">2</a>
        </li>
        
        <li>
            <a href="#slide3">3</a>
        </li>

        <li>
            <a href="#slide4">4</a>
        </li>

        <li>
            <a href="#slide5">5</a>
        </li>
    </ul>
</div>


.container{
    position: relative;
    margin: 50px auto;
    background: #FFF;
    width: 1000px;
    height: 550px;
    padding: 10px;
}


ul, li{
    list-style: none;
}


.slider{
    position: relative;
    width: 100%;
    height: 90%;
}


.slider div {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    /* Esto ocultara el contenedor de las imagenes, si las quiero mostrar lo que hare sera manipular el opacity */
    opacity: 0;
}

.slider div:first-child{
    opacity: 1;
}

/* Esta pseudoClase me permitira darle styles al objetivo, en este caso el elemento seleccionado en el anchor - #slide1 - #slide2 */
.slider div:target{
    opacity: 1;
}

.slider div img{
    width: 100%;
    height: 100%;
    object-fit: cover;
}



.menu{
    text-align: center;
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
}

.menu li{
    margin: 5px;
}

.menu li a{
    display: inline-block;
    width: 50px;
    height: 50px;
    text-decoration: none;
    line-height: 50px;
    background-color: #262626;
    font-size: 20px;
    border-radius: 50%;
    color: white;
}


12) Fondo de pantalla con efecto congelante:

<section>
    <div class="box"></div>
    <div class="bg"></div>
</section>

section{
    width: 100%;
    height: 100vh;
}

.bg{
    width: 100%;
    height: 100vh;
    background-image: url(img/image2.jpg);
    background-position: center;
    transition: all 1s;
}

.box{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 600px;
    height: 400px;
    background: url(img/image2.jpg);
    background-position: center;
    z-index: 1;
    transition: all 1s;
}

.box:hover{
    box-shadow: 0 25px 60px rgba(0, 0, 0, 0.8);
}

.box:hover ~ .bg{
    filter: blur(10px);
}



13) Fondo con rascacielos:
<h1>New York</h1>

h1{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 20px;
    width: 70%;

    text-transform: uppercase;
    font-size: 8em;
    text-align: center;
    letter-spacing: 0.1em;
    background-color: #72ceff;
    color: #FFF;
    text-shadow: 0 5px 2px rgba(0, 0, 0, .2);
    overflow: hidden;
}

h1::before, h1::after{
    content: '';
    position: absolute;
    /* Con esto situo al before justo por debajo de mi contenedor */
    top: 100%;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover !important;
    z-index: -1;
    transition: all .5s;
    animation: animate 50s linear infinite;
}

h1::before{
    background: url(img/skyline2.png);
}
h1::after{
    background: url(img/skyline.png);
}


h1:hover:before,
h1:hover::after{
    top: 0;
}

@keyframes animate{
    0%{
        background-position: 0%;
    }
    100%{
        background-position: 100%;
    }
}


14) Imagen Interactiva de blanco/negro a color:

<div class="box">
    <textarea readonly></textarea>
    <textarea readonly></textarea>
</div>

.box{
    position: relative;
    width: 500px;
    height: 500px;
    margin: 60px auto;
}

.box textarea{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url(img/image6.png);
    opacity: 0.5;
    filter: grayscale(100%);

    /* Esto no permitira que cambie el tamaño del text area */
    resize: none;
    border: none;

    /* Con esto limitamos el resize */
    max-width: 100%;
}

.box textarea:last-child{
    opacity: 1;
    filter: grayscale(0);
    resize: horizontal;
    border-right: 2px white solid;
}


15) TimeLine:
<div class="timeline">
    <ul>
        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        <li>
            <div class="content">
                    <h3>Lorem Ipsu dolor</h3>
                    <p>Texto</p>
            </div>

            <div class="time">
                    <h4>Junio 2021</h4>
            </div>
        </li>

        // ESTE ELEMENTO ME PERMITIRA QUE SE RESPETE EL TAMAÑO DE MI UL
        <div style="clear: both;"></div>
    </ul>
</div>


16) Boton de suscripcion - Video 120:

<section id="contacto" class="suscribe">
    <div class="search">
        <input type="text" class="search-text" placeholder="Ingresa tu email">
        <i class="fas fa-paper-plane search-icon"></i>
    </div>
</section>


/* SUSCRIBETE */
.suscribe{
    width: 100%;
    height: 300px;
    background: var(--color-oscuro);
    margin-top: 30px;
    position: relative;
}

.suscribe::before{
    content: 'Suscribete';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    text-align: center;
    font-weight: 600;
    font-size: 15vw;
    color: rgba(0, 0, 0, 0.08);
}

/* El Div que contiene el Input y el icon */
.search{
    position: relative;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: #e5e5e5;
    width: 60px;
    height: 60px;
    /* El 50px en vez de 50% es para que no se deforme al agrandarse */
    border-radius: 50px;
    padding: 10px;
    transition: all .5s;
    
}

.search:hover {
    width: 300px;
}

/* Al hacer hover sobre el search haremos crecer el input */
.search:hover.search input{
    width: 90%;
}

.search:hover.search i{
    background-color: var(--color-primario);
    color: #FFF;
}

/* Configuro el input para que no sea visible */
.search input{
    border: none;
    background: none;
    outline: none;
    float: left;
    padding: 0 10px;
    width: 0;
    height: 100%;
    color: #000;
    font-size: 16px;
    transition: all .5s;
}

.search i{
    position: absolute;
    top: 0;
    right: 0;
    color: var(--color-primario);
    /* Este configuracion de tamaño y no 100% me permitira anclarlo a la derecha en la expansion */
    width: 60px;
    height: 60px;
    border-radius: 50%;
    line-height: 60px;
    text-align: center;
    font-size: 20px;
    cursor: pointer;
    transition: all .5s;
}

.search i:hover{
    transform: scale(1.2);
}


17) Menu lateral ToolTip:
<nav>
    <a href="">
        <span class="icon fas fa-home"></span>
        <span class="title">Inicio</span>
    </a>
    <a href="">
        <span class="icon fas fa-user"></span>
        <span class="title">Usuarios</span>
    </a>
    <a href="">
        <span class="icon fas fa-comment"></span>
        <span class="title">Mensajes</span>
    </a>
    <a href="">
        <span class="icon fas fa-question-circle"></span>
        <span class="title">Ayuda</span>
    </a>
    <a href="">
        <span class="icon fas fa-cog"></span>
        <span class="title">Configuración</span>
    </a>
</nav>

body{
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #FFD107;
}

nav{
    position: relative;
    width: 60px;
    height: 300px;
    background-color: #FFF;
    border-radius: 10px;
    padding: 5px;

    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
}

nav a{
    position: relative;
    width: 100%; /* Con esto mis anchors ocuparan todo el ancho del nav disponible  */
    height: 15%;
    border-radius: 5px;
    text-decoration: none;
    color: #0077FF;
    transition: all .5s;

    /* Centramos el contenido del anchor */
    display: flex;
    justify-content: center;
    align-items: center;

}

nav a:hover{
    background-color: #0077FF;
    color: #FFF;
}

/* Este sera el Span al lado de mi Icon */
.title{
    /* Con este posicionamiento mi title se colocara a la izquierda y mis icons estaran centrados */
    position: absolute;
    left: 45px;

    /* Simulamos un contenedor */
    background-color: #FFF;
    padding: 10px 20px;
    border-radius: 10px;
    color: #0077FF;
    font-weight: 600;
    opacity: 0;
    transition: all .5s;
}

/* Haremos la flechita del tooltip */
.title::before{
    content: '';
    position: absolute;
    top: 35%;
    left: -5px;
    width: 12px;
    height: 12px;
    transform: rotate(45deg);
    background-color: #FFF;
}


nav a:hover .title{
    opacity: 1;
    transform: translateX(25px);
}



18) To Do List:
<div class="container">
    <h2>To Do List</h2>
    <div class="list">
        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Comer</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Programar</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Leer</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Compras</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Ejercicio</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Dormir</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Comer</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Comer</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Comer</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Comer</p>
                    <span></span>
            </label>
        </div>

        <div class="item">
            <label>
                    <input type="checkbox" name="" id="">
                    <p>Comer</p>
                    <span></span>
            </label>
        </div>
    </div>
</div>


body{
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #111;
}

.container{
    background-color: #FFF;
    width: 350px;
}

h2{
    background-color: #03A9F4;
    color: #FFF;
    font-weight: 600;
    text-transform: uppercase;
    padding: 20px;
}

/* LISTA */
.list{
    height: 500px;
    overflow-y: auto;
}

.list::-webkit-scrollbar{
    width: 5px;
}

.list::-webkit-scrollbar-thumb{
    background: #03A9F4;
}

/* ITEMS */
.item{
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    transition: all .5s;
}

.item:last-child{
    border-bottom: none;
}

.item:hover{
    background: rgba(0, 0, 0, 0.1);
}

/* Este label ocupara todo mi contenedor, al tocar a este activara el checkbox */
.item label{
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    padding: 20px;
}


.item p{
    font-size: 18px;
    letter-spacing: 1px;
    font-weight: 400;
}

/* Sera la representacion visual de nuestro checkbox aunque no lo sea */
.item span{
    position: relative;
    width: 30px;
    height: 30px;
    border: 1px solid #8B8B8B;
    border-radius: 50%;

    /* De esta forma centro el Icon del Check que crearemos con un pseudo elemento */
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Aca creo un especie de Icon de Check */
.item span::before{
    content: '';
    position: absolute;
    width: 10px;
    height: 5px;
    border-left: 2px solid #8b8b8b;
    border-bottom: 2px solid #8b8b8b;
    transform: rotate(-40deg);
}


/* Con esto ocultaremos mi input CHECKBOX */
.item input{
    display: none;
}


/* ESTADOS */
/* Con esto cambio de estilos si mi INPUT CheckBox esta chekeado */
.item input:checked ~ p{
    text-decoration: line-through;
    color: #ccc;
    font-weight: 600;
}


.item input:checked ~ span{
    background-color: #03A9F4;
    border: 1px solid #03A9F4;
}

.item input:checked ~ span::before{
    border-left: 2px solid #FFF;
    border-bottom: 2px solid #FFF;
}


19) Cards Personales:
<div class="container">
    <div class="card">
        <div class="img">
            <img src="img/image1.jpg" alt="">
        </div>

        <div class="content">
            <div class="text">
                    <h3>Lorem Ipsum</h3>
                    <span>Frontend web development</span>
            </div>
        
            <div class="sociales">
                    <a href=""><span class="fab fa-facebook-f"></span></a>
                    <a href=""><span class="fab fa-twitter"></span></a>
                    <a href=""><span class="fab fa-instagram"></span></a>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="img">
            <img src="img/image2.jpg" alt="">
        </div>

        <div class="content">
            <div class="text">
                    <h3>Lorem ipsum</h3>
                    <span>Frontend web development</span>
            </div>
        
            <div class="sociales">
                    <a href=""><span class="fab fa-facebook-f"></span></a>
                    <a href=""><span class="fab fa-twitter"></span></a>
                    <a href=""><span class="fab fa-instagram"></span></a>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="img">
            <img src="img/image3.jpg" alt="">
        </div>

        <div class="content">
            <div class="text">
                    <h3>Lorem ipsum</h3>
                    <span>Frontend web development</span>
            </div>
        
            <div class="sociales">
                    <a href=""><span class="fab fa-facebook-f"></span></a>
                    <a href=""><span class="fab fa-twitter"></span></a>
                    <a href=""><span class="fab fa-instagram"></span></a>
            </div>
        </div>
    </div>
</div>


body{
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background: #E0F7FA;
}

.container{
    display: flex;
    justify-content: center;
    align-items: center;
}

/* CARD */
.card{
    position: relative;
    width: 300px;
    height: 400px;
    margin: 20px;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    overflow: hidden;

    /* Centro el contenido de mis cards */
    display: flex;
    justify-content: center;
    align-items: center;
}

.img{
    width: 100%;
    height: 100%;
}

.img img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
}


/* CONTENIDO */
.content{
    position: absolute;
    bottom: -160px;
    width: 100%;
    height: 160px;

    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

    backdrop-filter: blur(15px);
    transition: all .5s;
}


.card:hover .content{
    bottom: 0;
}

/* TEXTO */
.content .text{
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}


.text h3, .text span{
    color: #FFF;
    text-transform: uppercase;
    letter-spacing: 2px;
    font-weight: 600;
    font-size: 22px;
    text-align: center;
    transform: translateY(10px);
    opacity: 0;
    transition: all .5s;
}


.text span{
    font-size: 12px;
}


.card:hover .text h3, .card:hover .text span{
    opacity: 1;
}

/* REDES SOCIALES */
.sociales{
    width: 60%;
    margin: 20px;
    display: flex;
    justify-content: space-around;
}


.sociales a {
    font-size: 20px;
    color: #FFF;
    opacity: 0;

    /* Esto es para que a la hora de animar aparezcan desde abajo */
    transform: translateY(40px);
    transition: all .5s;
}


.card:hover .sociales a{
    transform: translateY(10px);
    opacity: 1;
}

.sociales a:nth-child(1){
    transition-delay: .2s;
}

.sociales a:nth-child(2){
    transition-delay: .4s;
}

.sociales a:nth-child(3){
    transition-delay: .6s;
}



20) Cards Con efecto slide:
<div class="container">      
    <div class="card">
        <div class="img">
            <img src="img/image4.jpg" alt="">
        </div>

        <div class="content">
            <div class="text">
                    <h3>Titulo de post</h3>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt debitis temporibus quibusdam quod possimus ullam beatae.</p>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="img">
            <img src="img/image5.jpg" alt="">
        </div>

        <div class="content">
            <div class="text">
                    <h3>Titulo de post</h3>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt debitis temporibus quibusdam quod possimus ullam beatae.</p>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="img">
            <img src="img/image6.jpg" alt="">
        </div>

        <div class="content">
            <div class="text">
                    <h3>Titulo de post</h3>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt debitis temporibus quibusdam quod possimus ullam beatae.</p>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="img">
            <img src="img/image7.jpg" alt="">
        </div>

        <div class="content">
            <div class="text">
                    <h3>Titulo de post</h3>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt debitis temporibus quibusdam quod possimus ullam beatae.</p>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="img">
            <img src="img/image8.jpg" alt="">
        </div>

        <div class="content">
            <div class="text">
                    <h3>Titulo de post</h3>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt debitis temporibus quibusdam quod possimus ullam beatae.</p>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="img">
            <img src="img/image9.jpg" alt="">
        </div>

        <div class="content">
            <div class="text">
                    <h3>Titulo de post</h3>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt debitis temporibus quibusdam quod possimus ullam beatae.</p>
            </div>
        </div>
    </div>
</div>

body{
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #222;
}

.container{
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
}

.card{
    position: relative;
    width: 320px;
    height: 320px;
    margin: 15px;

    overflow: hidden;
    box-shadow: 0 5px 10px 5px rgba(0, 0, 0, 0.5); 
}

/* Los Containers que estan dentro de mis cards */
.img, .content{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.img img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
}


.content{
    display: flex;
    justify-content: center;
    align-items: center;
}


.content::before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #FFF;

    /* Con este achico a 0px mi before antes del hover */
    transform: scaleX(0);
    transition: transform .5s;
    transform-origin: right;
    transition-delay: .2s;
}

.card:hover .content::before{
    transform: scaleX(1);
    transform-origin: left;
}

/* Esto es para que el texto aparezca delante del background blanco del before, el trasition lo ocultare PRE-Hover */
.text{
    z-index: 1;
    padding: 30px;
    transform: translateX(-300px);
    transition: all .5s;
}

.card:hover .text{
    transform: translateX(0);
    transition-delay: .5s;
}

.text h3{
    font-size: 1.8em;
    text-transform: uppercase;
    letter-spacing: 1px;
}



21) Formulario de Contacto Profesional:
<section>
    <div class="container">      
        <!-- Info -->
        <div class="info">
            <div class="content">
                    <h2>Información de contacto</h2>
                    
                    <div class="info-text">
                        <div class="item">
                            <span class="fas fa-map-marker-alt"></span>
                            <span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident doloremque neque.</span>
                        </div>

                        <div class="item">
                            <span class="fas fa-envelope"></span>
                            <span>loremimpsum@gmail.com</span>
                        </div>

                        <div class="item">
                            <span class="fas fa-phone"></span>
                            <span>+00 123 456</span>
                        </div>
                    </div>
            </div>

            <div class="sociales">
                    <a href=""><span class="fab fa-facebook-f"></span></a>
                    <a href=""><span class="fab fa-twitter"></span></a>
                    <a href=""><span class="fab fa-instagram"></span></a>
                    <a href=""><span class="fab fa-youtube"></span></a>
                    <a href=""><span class="fab fa-google"></span></a>
            </div>
        </div>
        
        
        <!-- Form -->
        <div class="form">
            <h2>Comunicate con nosotros</h2>

            <div class="form-box">
                    <div class="input-box w50">
                        <input type="text" required>
                        <span>Nombre</span>
                    </div>

                    <div class="input-box w50">
                        <input type="text" required>
                        <span>Apellido</span>
                    </div>

                    <div class="input-box w50">
                        <input type="text" required>
                        <span>Email</span>
                    </div>

                    <div class="input-box w50">
                        <input type="text" required>
                        <span>Telefono</span>
                    </div>

                    <div class="input-box w100">
                        <textarea required></textarea>
                        <span>Escribe tu mensaje...</span>
                    </div>

                    <div class="input-box w100 btn">
                        <input type="submit" value="Enviar">
                    </div>
            </div>
        </div>
    </div>
</section>

section{
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background: linear-gradient(90deg, #03A9F4 50%, #112D42 50%);
}


.container{
    position: relative;
    width: 1100px;
    height: 550px; 
    z-index: 1;
    display: flex;
}

h2{
    font-size: 24px;
    font-weight: 600;
}


/* INFO */
.info{
    position: absolute;
    top: 40px;
    width: 350px;
    height: calc(100% - 80px);
    background-color: #0F3959;
    z-index: 1;
    padding: 40px;
    display: flex;
    justify-content: space-between;
    flex-direction: column;
    box-shadow: 10px 5px 30px rgba(0, 0, 0, 0.5);
}

.info h2{
    color: #FFF;
}

.info-text{
    margin: 20px 0;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.item{
    display: flex;
    cursor: pointer;
}


.item span{
    color: rgba(255, 255, 255, 0.5);
}

.item:hover span{
    color: rgba(255, 255, 255, 1);
}

/* A mis Span-Icons les doy el mismo tamaño asi se mantienen alineados */
.item span:first-child{
    width: 25px;
    margin-right: 30px;
    font-size: 30px;
}

.sociales{
    width: 80%;
    display: flex;
    justify-content: space-between;
}


.sociales a {
    text-decoration: none;
    font-size: 25px;
    color: rgba(255, 255, 255, 0.5);
}

.sociales a:hover{
    color: rgba(255, 255, 255, 1);
}


/* FORM */
.form{
    position: absolute;
    width: calc(100% - 200px);
    height: 100%;
    background: #FFF;
    margin-left: 150px;
    /* Acomodamos el contenido */
    padding: 70px 50px 70px 250px;

    box-shadow: 0 0 30px rgba(0, 0, 0, 0.5);
}


.form h2{
    color: #0F3959;
}

.form-box{
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    padding-top: 30px;
}

.input-box{
    position: relative;
    margin-bottom: 30px;
}

.input-box.w50{
    width: 48%;
}

.input-box.w100{
    width: 100%;
}

/* Con este le digo a mis inputs que ocupen el 100% del su contenedor que es input-box */
.input-box input,
.input-box textarea{
    width: 100%;
    padding: 5px 0;
    font-size: 18px;

    /* Con estos estilos conseguimos inputs modernos */
    color: #333;
    border: none;
    border-bottom: 1px solid #777;
    outline: none;
    resize: none;
}


.input-box textarea{
    min-height: 120px;
}

/* Con esto le hago el efecto moderno a los labels, el "placeholder desplazandose" */
.input-box span{
    position: absolute;
    left: 0;
    padding: 5px 0;
    letter-spacing: 1px;
    color: #888;
    transition: all .5s;

    /* Ignorara el click del span y clickeara el input */
    pointer-events: none;
}

/* Valid es para que si rellene el formulario el placeholder no vuelva a su estilo original */
.input-box input:focus ~ span,
.input-box input:valid ~ span,
.input-box textarea:focus ~ span,
.input-box textarea:valid ~ span{
    transform: translateY(-20px);
    font-size: 14px;
    font-weight: 400;
    letter-spacing: 1px;
    color: #03A9F4;
}


.input-box.btn{
    display: flex;
    justify-content: flex-end;
}

.input-box.btn input[type="submit"]{
    cursor: pointer;
    background-color: #0F3959;
    text-transform: uppercase;
    font-size: 14px;
    font-weight: 600;
    letter-spacing: 2px;
    color: #FFF;
    border: none;
    width: 30%;
    padding: 12px;
    transition: all .5s;
}

.input-box.btn input[type="submit"]:hover{
    background-color: #03A9F4;
}


22) Menus de redes sociales simple:
<nav>
    <a href=""><span class="fab fa-facebook-f"></span></a>
    <a href=""><span class="fab fa-instagram"></span></a>
    <a href=""><span class="fab fa-twitter"></span></a>
    <a href=""><span class="fab fa-youtube"></span></a>
    <a href=""><span class="fab fa-linkedin"></span></a>
    <a href=""><span class="fab fa-twitch"></span></a>
</nav>

nav{
    width: 100%;
    height: 45px;
    background-color: #0DCAF0;
    display: flex;
    justify-content: center;
    align-items: center;
}

nav a{
    width: 30px;
    height: 30px;
    color: rgba(255, 255, 255, 0.5);
    text-decoration: none;
    font-size: 20px;
    margin: 0 50px;
    border-radius: 50%;
    transition: all .5s;

    /* Este display flex es para poder centrar el span dentro del anchor */
    display: flex;
    justify-content: center;
    align-items: center;
}

nav a:hover{
    background: rgba(0, 0, 0, 0.1);
    box-shadow: 0 0 10px 5px rgba(0, 0, 0, 0.1);
    color: #FFF;
}


23) Menu de navegacion principal:

<nav>
    <img src="img/logo1.png" alt="">
    <div class="enlaces">
        <a href="">Inicio</a>
        <a href="">Nosotros</a>
        <a href="">Blog</a>
        <a href="">Multimedia</a>
        <a href="">Contacto</a>
    </div>
    <button>Ingresar</button>
</nav>


body{
    background-color: #24252A;
}

/* Casi todos los nav trabajan con Flex */
nav{
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 30px 5%;
}

nav img{
    width: 150px;
}

nav .enlaces a{
    position: relative;
    padding: 0 20px;
    text-decoration: none;
    transition: all .5s;
}

nav .enlaces a:hover{
    color: #FAAF38;
}

nav .enlaces a::before{
    content: '';
    width: 0%;
    height: 2px;
    background-color: #FAAF38;
    position: absolute;
    bottom: -5px;
    transition: all .5s;
}

nav .enlaces a:hover::before{
    width: 50%;
}

nav button{
    padding: 10px 25px;
    background-color: #FAAF38;
    color: #FFF;
    border: none;
    border-radius: 50px;
    cursor: pointer;
    transition: all .5s;
}

nav button:hover{
    background: #C98520;
}

nav .enlaces a, nav button{
    color: #EDF0D1;
    font-size: 0.9em;
    font-weight: 600;
    text-transform: uppercase;
}


24) Menu Lateral:
<nav>
    <img src="img/logo2.png" alt="">
    
    <div class="enlaces">
        <a href=""><span class="fas fa-home"></span> Inicio</a>
        <a href=""><span class="fas fa-blog"></span>Blog</a>
        <a href=""><span class="fas fa-users"></span>Nosotros</a>
        <a href=""><span class="fas fa-comment"></span>Testimonios</a>
        <a href=""><span class="fas fa-envelope"></span>Contacto</a>
    </div>

    <div class="sociales">
        <a href=""><span class="fab fa-facebook-f"></span></a>
        <a href=""><span class="fab fa-twitter"></span></a>
        <a href=""><span class="fab fa-instagram"></span></a>
    </div>
</nav>

nav{
    width: 220px;
    height: 100vh;
    background-color: #eee;
    border: 1px solid #dedede;
    box-shadow: 0.125rem 0 0.55rem 1px rgba(0, 0, 0, 8%);

    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

nav img{
    width: 100%;
    padding: 20px;
    cursor: pointer;
    transition: all .5s;
}

nav img:hover{
    transform: scale(.9);
}


nav .enlaces{
    display: flex;
    flex-direction: column;
    height: 80%;
    padding: 40px 0;
}

nav .enlaces a{
    width: 100%;
    height: 55px;

    /* Con este centrara mi span-icon */
    display: flex;
    justify-content: flex-start;
    align-items: center;

    padding: 20px;
    font-size: 1.2em;
    color: #584871;
    transition: all .5s;
}

nav .enlaces a:hover{
    background: #CCC;
}

/* Esto separara mis icons del texto */
nav .enlaces span{
    width: 45px;
    color: #4d3B68;
}


nav .sociales{
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
}


nav .sociales a{
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    background-color: #FF2753;
    color: #FFF;
    transition: all .5s;
}

nav .sociales a:hover{
    color: #FF2753;
    background: transparent;
    transform: scale(2);
}


25) Menu de navegacion de panel administrativo:

<!-- Menu lateral -->
<nav>
    <div class="contenedor-imagen">
        <img src="img/logo3.png" alt="" class="logo">
    </div>

    <div class="enlaces">
        <a href=""><span class="fas fa-users"></span></a>
        <a href=""><span class="fas fa-shopping-bag"></span></a>
        <a href=""><span class="fas fa-file-invoice-dollar"></span></a>
        <a href=""><span class="fas fa-comments"></span></a>
        <a href=""><span class="fas fa-file-alt"></span></a>
        <a href=""><span class="fas fa-cog"></span></a>
    </div>

    <a href="" class="btn-inferior"><span class="fas fa-power-off"></span></a>
</nav>

<!-- Menu superior -->
<header>
    <p>Bienvenido</p>

    <div class="info-user">
        <span class="fas fa-bell"></span>
        <div class="container-imagen">
            <img src="img/perfil.jpg" alt="">
        </div>
    </div>
</header>

<!-- Sociales -->
<div class="sociales">
    <div class="icon facebook">
        <div class="tooltip">Facebook</div>
        <span class="fab fa-facebook-f"></span>
    </div>

    <div class="icon twitter">
        <div class="tooltip">Twitter</div>
        <span class="fab fa-twitter"></span>
    </div>


    <div class="icon instagram">
        <div class="tooltip">Instagram</div>
        <span class="fab fa-instagram"></span>
    </div>

    <div class="icon youtube">
        <div class="tooltip">Youtube</div>
        <span class="fab fa-youtube"></span>
    </div>
</div>

nav{
    position: fixed;
    top: 0;
    left: 0;
    width: 60px;
    height: 100vh;
    background-color: #111;
}

.contenedor-imagen{
    width: 100%;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
}

.contenedor-imagen img{
    width: 100%;
}


.enlaces{
    height: 60%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
}


nav a{
    text-decoration: none;
    font-size: 18px;
    color: rgba(255, 255, 255, 0.4);
    width: 100%;
    height: 50px;

    /* Centro los Span-Icons */
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all .5s;
}

nav a:hover{
    background: rgba(255, 255, 255, 0.1);
    color: #0D6EFD;
}


.btn-inferior{
    position: absolute;
    bottom: 0;
}


.btn-inferior:hover{
    background-color: #dc3545;
    color: #FFF;
}



/* Menu Superior */
header{
    width: 100%;
    height: 50px;
    padding: 0 80px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border-bottom: 1px solid #F5F5F5;
}

header p{
    font-size: 1.2em;
    font-style: italic;
    letter-spacing: 1px;
    font-weight: 600;
}


header .info-user{
    display: flex;
    align-items: center;
}

header .info-user span{
    position: relative;
    margin: 0 15px;
    font-size: 1.2em;
    color: #4b4b4b;
    cursor: pointer;

    /* Con esto centrare mi icon */
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Circulo rojo de notificacion */
header .info-user span::after{
    content: '';
    position: absolute;
    width: 7px;
    height: 7px;
    background-color: #dc3545;
    border-radius: 50%;
    top: 4px;
    right: 8px;
}


header .info-user .container-imagen{
    position: relative;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
}


header .info-user .container-imagen img{
    width: 35px;
    height: 35px;
    border-radius: 50%;
    object-fit: cover;
    object-position: center;
}


header .info-user .container-imagen::after{
    content: '';
    position: absolute;
    width: 12px;
    height: 12px;
    background-color: #37E920;
    border-radius: 50%;
    bottom: 3px;
    right: 0;
}


/* SOCIALES */
.sociales{
    position: fixed;
    bottom: 30px;
    right: 30px;
    display: flex;
}

.sociales .icon{
    margin: 0 20px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: relative;
    cursor: pointer;
}

.sociales .icon span{
    width: 50px;
    height: 50px;
    background-color: #ccc;
    border-radius: 50%;
    font-size: 20px;

    display: flex;
    justify-content: center;
    align-items: center;
}


.sociales .icon .tooltip{
    position: absolute;
    top: 0px;
    background-color: #ccc;
    padding: 10px 18px;
    border-radius: 25px;
    font-weight: 600;
    opacity: 0;
    transition: all .5s;

}

.sociales .icon .tooltip::before{
    content: '';
    position: absolute;
    bottom: -8px;
    left: 50%;
    background-color: #ccc;
    width: 15px;
    height: 15px;
    transform: translateX(-50%) rotate(45deg);
    transition: all .5s;
}

.sociales .icon:hover .tooltip{
    opacity: 1;
    top: -60px;
    /* Corrige un problema de evento con el cursor */
    pointer-events: auto;
}

/* Le doy color a mis sociales */
.sociales .facebook:hover span,
.sociales .facebook:hover .tooltip,
.sociales .facebook:hover .tooltip::before{
    background: #3b5999;
    color: #FFF;
}

.sociales .twitter:hover span,
.sociales .twitter:hover .tooltip,
.sociales .twitter:hover .tooltip::before{
    background: #46c1f6;
    color: #FFF;
}

.sociales .instagram:hover span,
.sociales .instagram:hover .tooltip,
.sociales .instagram:hover .tooltip::before{
    background: #E1306C;
    color: #FFF;
}

.sociales .youtube:hover span,
.sociales .youtube:hover .tooltip,
.sociales .youtube:hover .tooltip::before{
    background: #dc3545;
    color: #FFF;
}


26) Pagina de Blog de juegos:
<body>
     <!-- Boton de ir arriba -->
     <a href="#home" class="btn-top"><span class="fas fa-angle-up"></span></a>

      <!-- Menu sociales -->
     <div id="home" class="nav-sociales">
          <a href=""class="fab fa-facebook-f"></a>
          <a href=""class="fab fa-twitter"></a>
          <a href=""class="fab fa-instagram"></a>
          <a href=""class="fab fa-youtube"></a>
          <a href=""class="fab fa-twitch"></a>
          <a href=""class="fab fa-discord"></a>
     </div>

     <!-- Menu principal -->
     <nav class="nav-principal">
          <img src="img/logo.png" alt="">
          <div class="input-search">
               <input type="text" name="" id="" placeholder="¿Qué deseas buscar?">
               <i class="fas fa-search"></i>
          </div>
          <div class="enlaces">
               <a href="#destacados">Destacados</a>
               <a href="#articulos">Articulos</a>
               <a href="#gallery">Multimedia</a>
          </div>
     </nav>


     <!-- Header -->
     <header>
          <div class="content-header">
               <span class="badge">Nuevo</span>
               <h3>Resident Evil Village el más descargado</h3>
               <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Nihil in et quae eveniet optio officiis explicabo maiores, cum ipsa voluptatem, sed vitae porro! Ea nemo expedita sapiente cumque veritatis perspiciatis.</p>
               <button class="btn">Leer más</button>
          </div>

          <div class="imagen-header"></div>
     </header>


     <!-- Destacados -->
     <section id="destacados" class="destacados">
          
          <div class="game">
               <div class="content">
                    <h2>Crash Bandicoot 4</h2>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero mollitia officia expedita ipsam itaque consequuntur adipisci.</p>
                    <a href="#">Leer más</a>
               </div>
               <img src="img/game2.png" alt="">
          </div>

          <div class="game">
               <div class="content">
                    <h2>Uncharted 4</h2>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero mollitia officia expedita ipsam itaque consequuntur adipisci.</p>
                    <a href="#">Leer más</a>
               </div>
               <img src="img/game3.png" alt="">
          </div>

          <div class="game">
               <div class="content">
                    <h2>God of war</h2>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero mollitia officia expedita ipsam itaque consequuntur adipisci.</p>
                    <a href="#">Leer más</a>
               </div>
               <img src="img/game4.png" alt="">
          </div>

          <div class="game">
               <div class="content">
                    <h2>Assassins creed Valhalla</h2>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero mollitia officia expedita ipsam itaque consequuntur adipisci.</p>
                    <a href="#">Leer más</a>
               </div>
               <img src="img/game5.png" alt="">
          </div>
     </section>



     <!-- Titulo de arcticulos -->
     <div id="articulos" class="title">
          <h1>Blog</h1>
          <div class="badget-container">
               <span class="badge">Tendencias</span>
               <span class="badge">Videojuegos</span>
               <span class="badge">Consolas</span>
               <span class="badge">Noticias</span>
          </div>      
     </div>

      <!-- Articulos -->
     <section class="articulos">

          <div class="container-articulos">
               
               <div id="godofwar" class="card">
                    <div class="imgBox">
                         <img src="img/card1.jpg" alt="">
                    </div>
                    <div class="content">
                         <h3>Imagenes God of war Ragnarok</h3>
                         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus, ipsa laboriosam fugit in dolorem iste, quo dignissimos, odit nemo rem at ea id ipsam sed obcaecati architecto animi ullam nam?</p>
                         <a href="#" class="btn">Leer más</a>
                    </div>
               </div>

               <div id="exitoventas" class="card">
                    <div class="imgBox">
                         <img src="img/game1.png" alt="">
                    </div>
                    <div class="content">
                         <h3>Exito en ventas</h3>
                         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus, ipsa laboriosam fugit in dolorem iste, quo dignissimos, odit nemo rem at ea id ipsam sed obcaecati architecto animi ullam nam?</p>
                         <a href="#" class="btn">Leer más</a>
                    </div>
               </div>

               <div id="gratismes" class="card">
                    <div class="imgBox">
                         <img src="img/card2.jpg" alt="">
                    </div>
                    <div class="content">
                         <h3>Juego gratuito del mes</h3>
                         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus, ipsa laboriosam fugit in dolorem iste, quo dignissimos, odit nemo rem at ea id ipsam sed obcaecati architecto animi ullam nam?</p>
                         <a href="#" class="btn">Leer más</a>
                    </div>
               </div>

               <div id="acvalhalla" class="card">
                    <div class="imgBox">
                         <img src="img/card3.jpeg" alt="">
                    </div>
                    <div class="content">
                         <h3>Nuevo contenido descargable</h3>
                         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus, ipsa laboriosam fugit in dolorem iste, quo dignissimos, odit nemo rem at ea id ipsam sed obcaecati architecto animi ullam nam?</p>
                         <a href="#" class="btn">Leer más</a>
                    </div>
               </div>

               <div id="fifa21" class="card">
                    <div class="imgBox">
                         <img src="img/card4.jpg" alt="">
                    </div>
                    <div class="content">
                         <h3>Próxima actualización FIFA21</h3>
                         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus, ipsa laboriosam fugit in dolorem iste, quo dignissimos, odit nemo rem at ea id ipsam sed obcaecati architecto animi ullam nam?</p>
                         <a href="#" class="btn">Leer más</a>
                    </div>
               </div>

               <div id="recordventas" class="card">
                    <div class="imgBox">
                         <img src="img/card5.jpg" alt="">
                    </div>
                    <div class="content">
                         <h3>Record en ventas</h3>
                         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus, ipsa laboriosam fugit in dolorem iste, quo dignissimos, odit nemo rem at ea id ipsam sed obcaecati architecto animi ullam nam?</p>
                         <a href="#" class="btn">Leer más</a>
                    </div>
               </div>


          </div>


          <aside>
               <nav>
                    <a href="#godofwar">Imagenes God of war Ragnarok</a>
                    <a href="#exitoventas">Exito en ventas</a>
                    <a href="#gratismes">Juego gratuito del mes</a>
                    <a href="#acvalhalla">Nuevo contenido descargable</a>
                    <a href="#fifa21">Próxima actualizacion FIFA21</a>
                    <a href="#recordventas">Record en ventas</a>
               </nav>
          </aside>
     </section>



      <!-- Galeria de imagenes -->
     <section id="gallery" class="gallery">
          <div class="column">
               <div class="imgContainer">
                    <img src="img/image1.jpg" alt="">
               </div>
               
               <div class="imgContainer">
                    <img src="img/image2.jpg" alt="">
               </div>

               <div class="imgContainer">
                    <img src="img/image3.jpg" alt="">
               </div>

               <div class="imgContainer">
                    <img src="img/image4.jpg" alt="">

               </div>
          </div>

          <div class="column">
               <div class="imgContainer">
                    <img src="img/image5.jpg" alt="">
               </div>

               <div class="imgContainer">
                    <img src="img/image6.jpg" alt="">
               </div>

               <div class="imgContainer">
                    <img src="img/image7.jpg" alt="">
               </div>

               <div class="imgContainer">
                    <img src="img/image8.jpg" alt="">
               </div>
          </div>

          <div class="column">
               <div class="imgContainer">
                    <img src="img/image9.jpg" alt="">
               </div>

               <div class="imgContainer">
                    <img src="img/image10.jpg" alt="">
               </div>

               <div class="imgContainer">
                    <img src="img/image11.jpg" alt="">
               </div>

               <div class="imgContainer">
                    <img src="img/image12.jpg" alt="">
               </div>
          </div>
     </section>



     <!-- Footer -->
     <!-- Menu sociales -->
     <div class="nav-sociales">
          <a href=""class="fab fa-facebook-f"></a>
          <a href=""class="fab fa-twitter"></a>
          <a href=""class="fab fa-instagram"></a>
          <a href=""class="fab fa-youtube"></a>
          <a href=""class="fab fa-twitch"></a>
          <a href=""class="fab fa-discord"></a>
     </div>

     <!-- FOOTER Copyright -->
     <footer class="copy">
          <p>© 2021. All Rights Reserved</p>
     </footer>
</body>

/* GENERALES */
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Roboto';
}

html{
    scroll-behavior: smooth;
}

:root{
    --color-principal: #6610f2;
    --color-secundario: #0C91E5;
    --color-alternativo: #FF6537;
    --gris-default: #6c757d;
}

a{
    text-decoration: none;
}

.btn{
    width: 200px;
    height: 40px;
    border: none;
    border-radius: 5px;
    background-color: var(--color-secundario);
    color: #FFF;
    font-size: 14px;
    font-weight: 600;
    text-transform: uppercase;
    cursor: pointer;
    transition: all .5s;
    
    display: flex;
    justify-content: center;
    align-items: center;
}

.btn:hover{
    background-color: #0874B8;
}

.badge{
    background-color: var(--color-principal);
    color: #FFF;
    font-size: 11px;
    font-weight: 600;
    text-transform: uppercase;
    border-radius: 20px;
    padding: 5px 15px;
    cursor: default;
    transition: all .5s;
}

/* Menu Sociales */
.nav-sociales{
    width: 100%;
    height: 35px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--color-principal);
}

.nav-sociales a{
    color: #FFF;
    opacity: 0.5;
    font-size: 14px;
    margin: 0 30px;
    transition: all .5s;
}

.nav-sociales a:hover{
    opacity: 1;
}


/* Menu principal */
.nav-principal{
    width: 100%;
    height: 50px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 30px;
}

.nav-principal img{
    width: 250px;
    cursor: pointer;
}


.nav-principal .input-search{
    width: 40%;
    position: relative;
}

.nav-principal .input-search input{
    width: 100%;
    height: 35px;
    border-radius: 50px;
    border: 1px solid #c4c4c4;
    color: var(--gris-default);
    outline: none;
    /* El Padding me permite reacomodar el placeholder */
    padding: 0 50px 0 30px;
}

.nav-principal .input-search input::placeholder{
    letter-spacing: 1px;
    color: #ccc;
}

.nav-principal .input-search i{
    position: absolute;
    top: 0;
    right: 0;
    width: 50px;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--color-alternativo);
}

.nav-principal .enlaces a {
    font-size: 14px;
    padding: 10px 15px;
    margin: 0 10px;
    text-transform: uppercase;
    font-weight: 600;
    letter-spacing: 1px;
    color: var(--gris-default);
    border-radius: 50px;
    transition: all .3s;
}

.nav-principal .enlaces a:hover{
    color: #FFF;
}

.nav-principal .enlaces a:nth-child(1):hover{
    background-color: var(--color-alternativo);
}

.nav-principal .enlaces a:nth-child(2):hover{
    background-color: var(--color-principal);
}

.nav-principal .enlaces a:nth-child(3):hover{
    background-color: var(--color-secundario);
}



/* HEADER */
header{
    width: 100%;
    height: calc(100vh - 95px);
    display: flex;
    justify-content: flex-start;
    align-items: center;
    padding-left: 50px;
}


/* Configuro la imagen Circular*/
header .imagen-header{
    width: 60%;
    height: 100%;
    background-image: url(img/game1.png);
    background-size: cover;
    background-position: center;
    clip-path: circle(90% at 92% 50%);
    z-index: 2;
    transition: all .2s;
}

header .content-header{
    /* Con esto evito cortar mi imagen circular */
    width: 50%;
}

/* Con esto le digo que todos los elementos que estan dentro de mi .content-header tengan un margin */
header .content-header *{
    margin: 10px 0;
}


header .content-header h3{
    font-size: 65px;
    font-weight: 300;
}


header .content-header p{
    font-size: 19px;
}




/* DESTACADOS */
/** DESTACADOS  */
.destacados{
     display: flex;
     justify-content: center;
     align-items: center;
     flex-wrap: wrap;
     position: relative;
}

.destacados::before{
     content: 'Destacados';
     position: absolute;
     display: flex;
     justify-content: center;
     align-items: center;
     font-weight: 600;
     font-size: 12em;
     color: rgba(0, 0, 0, 0.07);
}

.game{
     position: relative;
     width: 45%;
     height: 350px;
     margin: 40px 20px;
     display: flex;
     justify-content: flex-start;
     align-items: center;
     transition: all .5s;
}

/* De esta forma centro mi imagen */
.game img{
    position: absolute;
    left: 50%;
    bottom: 0;
    transform: translate(-50%);
    height: 380px;
    z-index: 1;
    pointer-events: none;
    transition: all .5s;
}

.game:nth-child(1){
     background: linear-gradient(45deg, #10214C, #DA3DBE);
}

.game:nth-child(2){
     background: linear-gradient(45deg, #1A2F3F, #7094CE);
}

.game:nth-child(3){
     background: linear-gradient(45deg, #000, #1C78B2);
}

.game:nth-child(4){
     background: linear-gradient(45deg, #0E2B2F, #00FFFF);
}


.game:hover img{
    left: 78%;
    height: 400px;
}
 

.game .content{
    position: relative;
    width: 50%;
    left: 20%;
    padding: 20px 20px 20px 40px;
    color: #FFF;
    opacity: 0;
    transition: all .5s;
}

.game:hover .content{
    left: 0;
    opacity: 1;

}


.game .content h2{
    text-transform: uppercase;
    font-size: 2.2em;
    line-height: 1em;
}

.game .content a{
    position: relative;
    color: #000;
    background-color: #FFF;
    display: inline-block;
    padding: 10px 20px;
    margin-top: 10px;
    font-weight: 700;
}


/* ARTICULOS */
/*? Titulo  */

.title{
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    margin: 70px 0 20px;
}

.title::before{
    content: 'Blog';
    position: absolute;
    top: -80px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: 600;
    font-size: 12em;
    z-index: -1;
    color: rgba(0, 0, 0, 0.1);
}

.title h1{
    font-size: 75px;
    font-weight: 300;
}

.title .badget-container{
    margin: 10px;
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    width: 100%;
}

.title .badget-container .badge{
    background: transparent;
    color: var(--gris-default);
    border: 1px solid var(--gris-default);
}

.title .badget-container .badge:hover{
    background-color: var(--color-principal);
    color: #FFF;
    border: 1px solid transparent;
}


/*? Seccion de articulos */
.articulos{
    position: relative;
    padding: 50px;
    display: flex;
    justify-content: space-around;
}

/* Separo mis articulos de mi menu sticky */
.container-articulos{
    margin: 0 100px 0 0;
}

/* Card contendra a cada articulo mio */
.card{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 200px;
    margin: 100px 0;
}

/* Corrijo el  margin top para la primera card */
.card:first-child{
    margin-top: 0;
}

.card .imgBox{
    width: 80%;
    height: 100%;
}

.card .imgBox img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: bottom;
}

/* Separo el texto de mi Image-card */
.card .content{
    padding-left: 20px;
}

/* Aplico margenes a todos los elementos que estan dentro de content */
.card .content *{
    margin: 15px 0;
}


.card .content h3{
    font-size: 40px;
    font-weight: 300;
    letter-spacing: 1px;
}

.card .content p{
    font-size: 18px;
}


/*? Menu Lateral  */
aside{
    width: 40%;
    height: 100%;
    background: var(--color-secundario);
    box-shadow: 0 0 10px 0 var(--color-secundario);
    padding: 20px;
    border-radius: 5px;
    position: sticky;
    top: 20px;
}

aside nav{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
}


aside nav a{
    margin: 15px 0;
    color: #FFF;
    opacity: 0.5;
    font-weight: 600;
    font-size: 16px;
    text-transform: uppercase;
    transition: all .5s;
}


aside nav a:hover{
    opacity: 1;
}


/* GALERIA */
.gallery{
    display: flex;
}

/* Con esto defino que todos mis columnas tengan el mismo tamaño*/
.gallery .column{
    flex: 30%;
}


.gallery .column .imgContainer{
    height: 300px;
    position: relative;
    /* Este es para que al hacer hover y aumentar scale no se muestre el desborde */
    overflow: hidden;
}

.gallery .column .imgContainer img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: all .5s;
}

.gallery .column .imgContainer:hover img{
    transform: scale(1.1) rotate(-3deg);
}


/* FOOTER COPY */
footer{
    width: 100%;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #581ABD;
}

footer p{
    font-size: 14px;
    font-style: italic;
    color: #FFF;
    opacity: .5;
}


/* Scroll Top Button */
.btn-top{
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 50px;
    height: 50px;
    background-color: var(--color-alternativo);
    opacity: 0.7;
    z-index: 1;

    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 20px;
    color: #FFF;
    transition: all .5s;
}

.btn-top:hover{
    opacity: 1;
}


27) Replica de Pinterest:

*HTMl APARTE*

/* GENERALES */
:root{
    --rojo100: #E60023;
    --rojo-hover: #AD081B;
    --gris100: #F4F4F4;
    --gris200: #efefef;
    --gris300: #767676;
    --gris400: #111;
    --border: #7FC1FF;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

a{
    text-decoration: none;
}

/*? Estilos Generales de nuestros botones */
.btn{
    display: flex;
    justify-content: center;
    align-items: center;
    background: var(--gris400);
    height: 48px;
    min-width: 73px;
    border-radius: 40px;
    color: #FFF;
    font-size: 16px;
    font-weight: 700;
}

/* MENU PRINCIPAL */

/*? Logo y Boton */
nav{
    position: fixed;
    width: 100%;
    height: 80px;
    background-color: #FFF;
    display: flex;
    align-items: center;
    padding: 4px 16px;
    z-index: 1;
}

nav .img-logo{
    min-width: 48px;
    height: 48px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    border-radius: 50%;
}

nav .img-logo img{
    width: 24px;
    height: 24px;
    border-radius: 50%;
}

nav .img-logo img:hover{
    box-shadow: 0 0 0 12px rgba(0, 0, 0, 0.07);
}


/*? Input de busqueda y icon search */
nav .input-container{
    /* Con esto defino un grow y shrink de 1, y un Basis AUTO. Esto hara que mi contenedor tenga el maximo tamaño posible permitido y que sea
    Flexible con respecto a cuanto ocupara */
    flex: 1 1 auto;
    min-width: 407px;
    height: 48px;
    padding: 0 8px;
    position: relative;
}

/* Con esto mi input abarcara todo el contenedor */
nav .input-container input{
    width: 100%;
    height: 100%;
    border-radius: 40px;
    /* La razon de crear un borde trasparente es que lo vamos a mostrar luego en un hover, sin tener una animacion de que crezca */
    border: 3px solid transparent;
    background-color: var(--gris200);
    padding: 0 0 0 38px;
    outline: none;
}


nav .input-container input::placeholder{
    font-size: 16px;
}

nav .input-container input:focus{
    border: 3px solid var(--border);
    padding: 0 0 0 16px;
}

nav .input-container i{
    position: absolute;
    top: 0;
    left: 0;
    width: 48px;
    height: 100%;

    /* Centro mi Icon */
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0 0 0 16px;
    color: var(--gris300);
}

nav .input-container input:focus ~ i{
    width: 0;
    opacity: 0;
}


/*? Menu Iconos  */
nav .iconos{
    display: flex;
    justify-content: space-around;
    align-items: center;
    width: 168px;
    font-size: 24px;
    color: var(--gris300);
}

nav .iconos span, 
nav .iconos div{
    width: 48px;
    height: 48px;

    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    border-radius: 50%;
}

nav .iconos span:hover, 
nav .iconos div:hover{
    background-color: rgba(0, 0, 0, 0.07);
}


nav .iconos span:last-child{
    width: 24px;
    height: 24px;
    font-size: 18px;
}

nav .iconos div img{
    width: 24px;
    height: 24px;
    border-radius: 50%;
    object-fit: cover;
}

/* GALERIA */
/*? Alineacion de columnas  */

/* Hago que mis columnas se pongan una al lado de la otra */
.row{
    width: 1260px;
    margin: 0 auto;
    padding: 80px 0;
    display: flex;
}

.column{
    width: 20%;
    margin: 0 10px;
}

/* Item es cada imagen y su info */
.item{
    margin: 0 0 16px 0;
}

.container-img{
    position: relative;
    cursor: zoom-in;
    transition: all .3s;
}

/* Cuando Se haga un hover se creara el before */
.container-img:hover:before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 99%;
    background: rgba(0, 0, 0, 0.4);
    border-radius: 16px;
    transition: all .3s;
}

.container-img img{
    width: 100%;
    border-radius: 16px;
}

/* De estas forma oculto la info que solo sera mostrada en un hover */
.container-img div{
    display: none;
}


/*? Hover Del Post  */
.container-img div{
    /* Absolute asi puedo colocar la info arriba de la imagen facilmente, el opacity de 0 los oculta hasta el hover */
    position: absolute;
    width: 100%;
    display: flex;
    padding: 15px;
    opacity: 0;
    transition: all .2s;
}

.container-img:hover div{
    opacity: 1;
}

/* Posiciones el top-row arriba y alineo su contenido, puedo usar alineacion flex gracias a la linea de arriba*/
.container-img .top-row{
    top: 0;
    left: 0;
    justify-content: space-between;
    align-items: flex-start;
}

/* Selecciono los Anchor que no tengan la clase .btn  */
.container-img .top-row a:not(.btn){
    color: #FFF;
    font-weight: 700;
    width: 40%;
    height: 100%;

    /* Con esto genero la ellipsis */
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    overflow: hidden;
}

.container-img .top-row span{
    color: #FFF;
    /* Alinearemos el span al centro del eje secundario, eje Y esta vez */
    align-self: center;
    padding-right: 5px;
    font-size: 14px;
}

.container-img .top-row .btn{
    background: var(--rojo100);
    height: 45px;
    min-width: 93px;
}

.container-img .top-row .btn:hover{
    background: var(--rojo-hover);
}

.container-img .bottom-row{
    bottom: 0;
    left: 0;
    height: 64px;
    justify-content: space-between;
}

.container-img .bottom-row a{
    background: var(--gris100);
    border-radius: 20px;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    color: #111;
    font-weight: 700;
    font-size: .9em;
}

.container-img .bottom-row a:nth-child(1){
    width: 62%;
    height: 100%;
    overflow: hidden;
}

.container-img .bottom-row a:nth-child(1) span{
    padding: 0 8px;
    transform: rotate(45deg);
    font-size: 12px;
}

/* Gracias al width tendra un ancho fijo */
.container-img .bottom-row a:nth-child(2),
.container-img .bottom-row a:nth-child(3){
    width: 32px;
    justify-content: center;
}


/*? Reacciones del post */
.info-img{
    display: flex;
    flex-direction: column;
    padding: 5px 10px;
}

.info-img .info{
    display: flex;
    align-items: center;
}

.info-img .info img{
    width: 32px;
    height: 32px;
    object-fit: cover;
    border-radius: 50%;
}

.info-img .info a{
    font-size: 14px;
    color: var(--gris400);
    padding: 0 5px;
}

.info-img .info a:hover{
    text-decoration: underline;
}

.reactions{
    display: flex;
    align-items: center;
    margin: 5px 0;
    cursor: pointer;
}

.reactions img{
    width: 16px;
    height: 16px;
    margin-right: 1px;
}

.reactions span{
    font-size: 14px;
    margin-left: 5px;
    color: var(--gris400);
}



/* BOTONES INFERIORES */
.btn-inferiores{
    position: fixed;
    right: 25px;
    bottom: 20px;
    display: flex;
    flex-direction: column;
}


.btn-inferiores a{
    display: flex;
    justify-content: center;
    align-items: center;
    background: #FFF;
    color: var(--gris400);
    font-size: 20px;
    width: 56px;
    height: 56px;
    border-radius: 50%;
    margin: 5px 0;
    box-shadow: 2px 2px 10px 1px rgba(0, 0, 0, 0.1);
}

.btn-inferiores a:hover{
    background: var(--gris100);
}


28) Info Cards con Grid:
<div class="grid-container">
    <div class="item">
        <h2>1</h2>
        <h3>Lorem ipsum</h3>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo, magni non labore quos provident pariatur possimus fugit ab nihil aliquam totam, earum facilis commodi quam hic enim tempora delectus. Aperiam!</p>
    </div>

    <div class="item">
        <h2>2</h2>
        <h3>Lorem ipsum</h3>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo, magni non labore quos provident pariatur possimus fugit ab nihil aliquam totam, earum facilis commodi quam hic enim tempora delectus. Aperiam!</p>
    </div>

    <div class="item">
        <h2>3</h2>
        <h3>Lorem ipsum</h3>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo, magni non labore quos provident pariatur possimus fugit ab nihil aliquam totam, earum facilis commodi quam hic enim tempora delectus. Aperiam!</p>
    </div>

    <div class="item">
        <h2>4</h2>
        <h3>Lorem ipsum</h3>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo, magni non labore quos provident pariatur possimus fugit ab nihil aliquam totam, earum facilis commodi quam hic enim tempora delectus. Aperiam!</p>
    </div>
</div>

body{
    display: grid;
    place-items: center;
    height: 100vh;
    background-color: #222;
}

.grid-container{
    width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
}

.item{
    color: #FFF;
    padding: 20px 40px 40px;
    text-align: center;
}

.item:nth-child(1){
    background: linear-gradient(45deg, #036EB7, #64EAFF);
}

.item:nth-child(2){
    background: linear-gradient(45deg, #8E1EE9, #ed55ff);
}

.item:nth-child(3){
    background: linear-gradient(45deg, #ff0000, #ff5c85);
}

.item:nth-child(4){
    background: linear-gradient(45deg, #fa9600, #f4c030);
}

.item h2{
    font-size: 100px;
    opacity: .4;
}

.item h3{
    font-size: 24px;
    text-transform: uppercase;
}


29) Galeria con Grid:
<div class="grid-container">
    <div class="item r-span2">
        <img src="img/bg1.jpg" alt="">
    </div>

    <div class="item c-span2">
        <img src="img/bg2.jpg" alt="">
    </div>

    <div class="item r-span2">
        <img src="img/bg3.jpg" alt="">
    </div>

    <div class="item">
        <img src="img/bg4.jpg" alt="">
    </div>

    <div class="item">
        <img src="img/bg5.jpg" alt="">
    </div>

    <div class="item c-span2">
        <img src="img/bg6.jpg" alt="">
    </div>

    <div class="item c-span2">
        <img src="img/bg7.jpg" alt="">
    </div>
</div>

body{
    display: grid;
    place-items: center;
    height: 100vh;
    background-color: #000;
}

.grid-container{
    width: 100%;
    padding: 5px;
    display: grid;
    gap: 5px;

    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(3, 200px);
}

.grid-container:hover .item{
    opacity: .2;
}

.item{
    transition: all .3s;
}

.item:hover{
    opacity: 1 !important;
}

.item img{
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* Esta clase la tendran los contenedores a los que quiero duplicar el tamaño de su fila/row */
.r-span2{
    grid-row: span 2;
}

/* Esta hara lo mismo pero para columnas */
.c-span2{
    grid-column: span 2;
}


30) Google-Tools en estructura Masonry:
<div class="grid-container">
    <div class="item">
        <img src="img/image1.png" alt="">
        <h3>Gmail</h3>
    </div>

    <div class="item">
        <img src="img/image2.png" alt="">
        <h3>Buscador</h3>
    </div>

    <div class="item">
        <img src="img/image3.png" alt="">
        <h3>Drive</h3>
    </div>

    <div class="item">
        <img src="img/image4.png" alt="">
        <h3>Translate</h3>
    </div>

    <div class="item">
        <img src="img/image5.png" alt="">
        <h3>Maps</h3>
    </div>

    <div class="item">
        <img src="img/image6.png" alt="">
        <h3>Youtube</h3>
    </div>

    <div class="item">
        <h1>Google Apps</h1>
    </div>
</div>

.grid-container{
    height: 100vh;
    padding: 10px;

    display: grid;
    gap: 10px;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: auto;
    grid-template-areas: 'gmail gmail google drive'
                         'translate maps google youtube'
                         'translate apps apps apps'
}

.item{
    color: #FFF;
    text-shadow: 0 0 5px rgba(0, 0, 0, .5);
    text-align: center;
    opacity: .8;

    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    cursor: default;
    transition: all .2s;
}

.item:hover{
    opacity: 1;
}

.item:nth-child(1){
    background: #E53935;
    grid-area: gmail;
}

.item:nth-child(2){
    background: #0d47a1;
    grid-area: google;
}

.item:nth-child(3){
    background: #fbc02d;
    grid-area: drive;
}

.item:nth-child(4){
    background: #1e88e5;
    grid-area: translate;
}

.item:nth-child(5){
    background: #43a047;
    grid-area: maps;
}

.item:nth-child(6){
    background: #e53935;
    grid-area: youtube;
}

.item:nth-child(7){
    background: #555;
    grid-area: apps;
}

.item img{
    width: 100px;
    transition: all .5s;
}

.item:hover img{
    transform: scale(1.1);
}

.item h3{
    margin: 10px 0;
    font-size: 24px;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 600;
}


.item h1{
    font-size: 8em;
    font-weight: 600;
    letter-spacing: 1px;
    text-transform: uppercase;
}



31) Testimonios Card: 
<div class="grid-container">
    <div class="item">
        <img src="img/profile1.jpg" alt="">
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Officia alias saepe ad dolores eius, accusantium eligendi nihil, minus nostrum in at repudiandae eos molestiae, doloremque similique. Expedita praesentium laborum incidunt.</p>
        <h3>Lorem ipsum</h3>
        <h4>Director creativo</h4>
    </div>

    <div class="item">
        <img src="img/profile2.jpg" alt="">
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Officia alias saepe ad dolores eius, accusantium eligendi nihil, minus nostrum in at repudiandae eos molestiae, doloremque similique. Expedita praesentium laborum incidunt.</p>
        <h3>Lorem ipsum</h3>
        <h4>Director creativo</h4>
    </div>

    <div class="item">
        <img src="img/profile3.jpg" alt="">
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Officia alias saepe ad dolores eius, accusantium eligendi nihil, minus nostrum in at repudiandae eos molestiae, doloremque similique. Expedita praesentium laborum incidunt.</p>
        <h3>Lorem ipsum</h3>
        <h4>Director creativo</h4>
    </div>

    <div class="item">
        <img src="img/profile4.jpg" alt="">
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Officia alias saepe ad dolores eius, accusantium eligendi nihil, minus nostrum in at repudiandae eos molestiae, doloremque similique. Expedita praesentium laborum incidunt.</p>
        <h3>Lorem ipsum</h3>
        <h4>Director creativo</h4>
    </div>

    <div class="item">
        <img src="img/profile5.jpg" alt="">
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Officia alias saepe ad dolores eius, accusantium eligendi nihil, minus nostrum in at repudiandae eos molestiae, doloremque similique. Expedita praesentium laborum incidunt.</p>
        <h3>Lorem ipsum</h3>
        <h4>Director creativo</h4>
    </div>

    <div class="item">
        <img src="img/profile6.jpg" alt="">
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Officia alias saepe ad dolores eius, accusantium eligendi nihil, minus nostrum in at repudiandae eos molestiae, doloremque similique. Expedita praesentium laborum incidunt.</p>
        <h3>Lorem ipsum</h3>
        <h4>Director creativo</h4>
    </div>

    <div class="item">
        <img src="img/profile7.jpg" alt="">
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Officia alias saepe ad dolores eius, accusantium eligendi nihil, minus nostrum in at repudiandae eos molestiae, doloremque similique. Expedita praesentium laborum incidunt.</p>
        <h3>Lorem ipsum</h3>
        <h4>Director creativo</h4>
    </div>

    <div class="item">
        <img src="img/profile8.jpg" alt="">
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Officia alias saepe ad dolores eius, accusantium eligendi nihil, minus nostrum in at repudiandae eos molestiae, doloremque similique. Expedita praesentium laborum incidunt.</p>
        <h3>Lorem ipsum</h3>
        <h4>Director creativo</h4>
    </div>
</div>

.grid-container{
    padding: 70px;
    display: grid;
    gap: 50px;
    grid-template-columns: repeat(2, 1fr);
}

.item{
    position: relative;
    margin: 20px;
    background-color: #FFF;
    padding: 70px 40px;
    text-align: center;
    transition: all .5s;
}

.item:hover{
    background-color: #BB0019;
}

.item img{
    position: absolute;
    top: -60px;
    left: 50%;
    transform: translateX(-50%);
    width: 120px;
    height: 120px;
    object-fit: cover;
    object-position: center;
    border-radius: 50%;
}

.item p{
    transition: all .5s;
}

.item h3{
    margin: 20px 0 0 0;
    font-size: 18px;
    font-size: 600;
    text-transform: uppercase;
    transition: all .5s;
}

.item h4{
    font-size: 14px;
    font-weight: 600;
    color: #BB0019;
    transition: all .5s;
}

.item:hover *{
    color: #FFF;
}

.item::before{
    content: '';
    position: absolute;
    top: 20px;
    right: 40px;
    width: 80px;
    height: 80px;
    background: url(img/quote.png);
    background-size: cover;
    opacity: .1;
    transition: all .5s;
}

.item:hover::before{
    transform: translateY(-60px);
    opacity: 1;
}

.item::after{
    content: '';
    position: absolute;
    bottom: 20px;
    left: 40px;
    width: 80px;
    height: 80px;
    background: url(img/quote.png);
    background-size: cover;
    opacity: .1;
    transition: all .5s;
    transform: rotate(180deg);
}

.item:hover::after{
    transform: rotate(180deg) translateY(-60px);
    opacity: 1;
}


32) Footer Profesional:
<footer>
    <div class="nosotros">
        <h2>Nosotros</h2>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptate soluta amet, similique atque nemo aliquid officiis ad eos accusamus ipsa voluptatibus exercitationem, quia sit error esse reiciendis odio recusandae blanditiis.</p>

        <div class="sociales">
            <a href=""><span class="fab fa-facebook-f"></span></a>
            <a href=""><span class="fab fa-twitter"></span></a>
            <a href=""><span class="fab fa-instagram"></span></a>
            <a href=""><span class="fab fa-youtube"></span></a>
            <a href=""><span class="fab fa-linkedin-in"></span></a>
        </div>
    </div>

    <div class="enlaces">
        <h2>Enlaces sugeridos</h2>
        <ul>
            <li><a href="">Nosotros</a></li>
            <li><a href="">FAQ</a></li>
            <li><a href="">Politicas</a></li>
            <li><a href="">Ayuda</a></li>
            <li><a href="">Terminos & Condiciones</a></li>
            <li><a href="">Contacto</a></li>
        </ul>
    </div>

    <div class="enlaces">
        <h2>Tienda</h2>
        <ul>
            <li><a href="">Telefonia</a></li>
            <li><a href="">Videoconsolas</a></li>
            <li><a href="">Computadores</a></li>
            <li><a href="">Audifonos</a></li>
            <li><a href="">Perifericos</a></li>
            <li><a href="">Televisores</a></li>
        </ul>
    </div>

    <div class="contacto">
        <h2>Contáctanos</h2>

        <div>
            <span class="fas fa-map-marked"></span>
            <span>Lorem ipsum dolor sit amet consectetur adipisicing elit. USA</span>
        </div>
        <div>
            <span class="fas fa-phone"></span>
            <p>  
                    <a href="">+1 123456789</a>
                    <a href="">+1 987654321</a>
            </p>
        </div>

        <div>
            <span class="fas fa-envelope"></span>
            <p><a href="">miemail@gmail.com</a></p>
        </div>
    </div>
</footer>

<div class="copy">
    <p>Copyright © 2021. Todos los derechos reservados</p>
</div>


a{
    text-decoration: none;
    display: inline-block;
}

li{
    list-style: none;
}

a:hover{
    color: #4da1fa;
}

body{
    display: grid;
    justify-content: end;
    align-content: end;
    min-height: 100vh;
}

footer{
    background: #222;
    padding: 50px 100px;

    display: grid;
    grid-template-columns: 2fr repeat(3, 1fr);
    gap: 20px;
}

footer h2{
    color: #CCC;
    font-weight: 400;
    letter-spacing: 1px;
    margin: 15px 0;
}

/* NOSOTROS */
.sociales{
    margin: 10px 0;
    display: grid;
    grid-template-columns: repeat(5, 50px);
    gap: 10px;
}

.sociales a{
    width: 50px;
    height: 50px;
    background-color: #555;
    color: #FFF;
    font-size: 20px;
    border-radius: 5px;

    display: flex;
    justify-content: center;
    align-items: center;
    transition: all .3s;
}

.sociales a:hover{
    background-color: #333;
}

/* CONTACTO */
/* Lo que hare es darle a cada div de contacto un Display grid, la columna del icon ocupara 30px y la columna del texto el resto del espacio */
.contacto div{
    display: grid;
    grid-template-columns: 30px 1fr;
    margin: 15px 0;
}


/* COPY */
.copy{
    background-color: #111;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
}


33) Apple Page:
<body>
    <!-- Menu de navegacion -->
     <nav>
          <div class="enlaces">
               <a href="#iphone"><img src="img/logo.png" alt=""></a>
               <a href="#iphone">iPhone</a>
               <a href="#ipad">iPad</a>
               <a href="#watch">Watch</a>
               <a href="#airpods">Airpods</a>
               <a href="#musictv">Music / Tv</a>
               <a href="#imac">iMac</a>
               <a href="">Dónde comprar</a>
               <a href=""><span class="fas fa-search"></span></a>
          </div>
     </nav>

     
     <!-- Header -->
     <header id="iphone">
          <div class="grid">
               <div class="span12 text-container">
                    <h2>iPhone 12 y iPhone 12 mini</h2>
                    <h1>Súper. Mega. Rápido.</h1>
                    <h3>Muy pronto disponible en morado.</h3>
               </div>

               <div class="span12 img-container">
                    <img src="img/image1.jpg" alt="">
               </div>
          </div>
     </header>


     <!-- Seccion Servicios -->
     <section class="service">
          <div class="grid">
               <div class="span12 contenedor">
                    <img src="img/image3.png" alt="">
                    <div class="text-container">
                         <h2>Disfruta cuatro servicios de Apple en uno. Y aprovecha más por menos.</h2>
                    </div>
               </div>
          </div>
     </section>



     <!-- Ipad -->
     <section id="ipad" class="ipad">
          <div class="grid">

               <div class="text-container">
                    <h1>iPad Pro</h1>
                    <h3>El iPad en su máxima expresión</h3>
                    <a href="" class="enlace-info">Más informacion <span class="fas fa-angle-right"></span></a>
               </div>


               <div class="span9">
                    <img src="img/image4.jpg" alt="">
               </div>

          </div>
     </section>


     <!-- Watch -->
     <section id="watch" class="watch">
          <div class="grid">
               <div class="span6">
                    <img src="img/image5.jpg" alt="">
               </div>

               <div class="span6 text-container">
                    <img src="img/watch.png" alt="">
                    <h1>Te ayuda a hacer más. Por menos de lo que crees.</h1>
                    <a href="" class="enlace-info">Más informacion <span class="fas fa-angle-right"></span></a>
               </div>
          </div>
     </section>


     <!-- Airpods -->
     <section id="airpods" class="airpods">
          <div class="grid">
               <div class="span6 text-container">
                    <h1>Airpods</h1>
                    <h3>Cada uno tiene su magia.</h3>
                    <a href="" class="enlace-info">Más informacion <span class="fas fa-angle-right"></span></a>
               </div>

               <div class="span6">
                    <img src="img/image6.jpg" alt="">
               </div>
          </div>
     </section>


     <!-- Music / TV -->
     <section id="musictv" class="musictv">
          <div class="grid">
               <div class="span6 text-container">
                    <div class="text">
                         <img src="img/appletv.png" alt="" class="icon">
                         <h3>Obtén 1 año gratis de Apple TV+ al comprar un iPad.</h3>
                         <a href="" class="enlace-info">Más informacion <span class="fas fa-angle-right"></span></a>
                    </div>
                    <div class="imagen">
                         <img src="img/image7.jpg" alt="">
                    </div>
               </div>
     
               <div class="span6 text-container ct2">
                    <div class="text">
                         <img src="img/applemusic.png" alt="" class="icon">
                         <h3>Más de 75 millones de canciones. 3 meses gratis.</h3>
                         <a href="" class="enlace-info">Más informacion <span class="fas fa-angle-right"></span></a>
                    </div>
                    <div class="imagen">
                         <img src="img/image8.png" alt="">
                    </div>
               </div>
          </div>
     </section>


     <!-- iMac -->
     <section id="imac" class="imac">
          <div class="grid">
               <div class="span12 text-container">
                    <h1>iMac</h1>
                    <h2>Dile hola.</h2>
                    <h3>Consulta disponibilidad más adelante.</h3>
                    <a href="" class="enlace-info">Más informacion <span class="fas fa-angle-right"></span></a>
               </div>

               <div class="span12 img-container">
                    <img src="img/image9.jpg" alt="">
               </div>
          </div>
     </section>


      <!-- Footer -->
     <footer>
          <img src="img/logo.png" alt="">
     </footer>
</body>

/** VARIABLES */
:root{
     --text-color: #1D1D1F;
     --text-color-claro: #86868B;
     --color-enlaces: #06C;
     --color-background: #FAFAFA;
}

/* SCROLLBAR STYLE */
body::-webkit-scrollbar{
    width: 8px;
}

body::-webkit-scrollbar-thumb{
    background-color: var(--text-color);
}

/* GENERALES */
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, Helvetica, sans-serif;
}

body{
    background: var(--color-background);
}

html{
    scroll-behavior: smooth;
}

a{
    text-decoration: none;
}

h1, h2, h3{
    line-height: 1.2;
    font-weight: 600;
    color: var(--text-color);
    text-align: center;
}

h1{
    font-size: 48px;
    margin-top: 10px;
}

h2{
    font-size: 24px;
}

h3{
    font-size: 21px;
    font-weight: 400;
    color: var(--text-color-claro);
    margin-top: .5em;
}

img{
    width: 100%;
}

section{
    position: relative;
    width: 100%;
    height: 100vh;
}

.text-container{
    flex-direction: column;
}

.enlace-info{
    font-size: 21px;
    margin-top: 30px;
    color: var(--color-enlaces);
}

.enlace-info:hover{
    text-decoration: underline;
}

/* ESTILOS DE GRID - CREAR GRID DE 12 COLS */
.grid{
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    gap: 20px;
    height: 100%;
}

/* Los hijos div de .grid alinearan sus hijos con Flexbox */
.grid div{
    display: flex;
    justify-content: center;
    align-items: center;
}


.span12{
    grid-column: span 12;
}

.span9{
    grid-column: span 9;
}

.span7{
    grid-column: span 7;
}

.span6{
    grid-column: span 6;
}

.span5{
    grid-column: span 5;
}

/* NAV */
nav{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 44px;
    z-index: 3;
    background-color: rgba(0, 0, 0, .8);
}

nav .enlaces{
    position: relative;
    height: 100%;
    padding: 0 22px;
    margin: 0 auto;
    max-width: 980px;

    display: flex;
    justify-content: space-between;
    align-items: center;
}

nav .enlaces img{
    width: 16px;
}

nav .enlaces a{
    color: #f5f5f7;
    font-size: 14px;
    padding: 0 10px;
    opacity: .8;
    cursor: pointer;
    transition: all .3s;
}

nav .enlaces a:hover{
    opacity: 1;
}



/* HEADER */
header{
    width: 100%;
    height: calc(100vh - 44px);
    margin: 44px 0 0 0;
    background-color: #F2f2f2;
}

header img{
    width: 85%;
}


header .text-container{
    padding: 30px 0 0 0;
    justify-content: flex-end !important;
}

header .img-container{
    align-items: flex-end;
}


/* SERVICIOS */
.service{
    background: url(img/image2.jpg);
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
}

.service::before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, .95);
}

.service .grid{
    width: 85%;
    margin: 0 auto;
}

.service .contenedor{
    flex-direction: column;
    z-index: 1;
}

.service img{
    width: 250px;
    height: 250px;
    margin: 25px 0;
}

.service .text-container{
    width: 60%;
    text-align: center;
}

.service .text-container h2{
    color: #FFF;
    font-size: 28px;
    font-weight: 400;
}


/* PRODUCTOS */

/*? IPAD  */
.ipad{
    background-color: #FFF;
}

.ipad img{
    height: 85%;
    object-fit: cover;
    object-position: left;
}

.ipad .text-container{
    grid-column: 2 /4;
    align-items: flex-start;
}



/*? WATCH  */
.watch{
    padding: 30px 50px 0 50px;
}

.watch .text-container img{
    width: 100px;
}


/*? Airpods  */
.airpods{
    /* Con esto sobrescribo el 100vh de la seccion, con auto la seccion tendra el minimo ALTO minimo que abarque el contenido */
    height: auto;
}


/* MUSIC TV */
.musictv{
    padding: 30px;
}


.musictv .text-container{
    background-color: #000;
}

.musictv .text{
    height: 50%;
    width: 50%;
    padding: 60px 0 0 0;
    text-align: center;
    flex-direction: column;
}


.musictv .imagen{
    height: 100%;
    align-items: flex-end;
}

.musictv .text-container .icon{
    width: 100px;
    height: 40px;
}

.musictv .text-container h3{
    color: #FFF;
}

.musictv .text-container .enlace-info{
    margin: 10px 0 30px 0;
}

.musictv .ct2{
    background-color: #fff;
}

.musictv .ct2 .icon{
    width: 150px;
}

.musictv .ct2 h3{
    color: var(--text-color);
}


/* IMAC */
.imac{
    background-color: #FFF;
    padding: 50px 0;
}

.imac img{
    width: 50%;
}

.imac h1{
    font-size: 56px;
}

.imac h2{
    font-size: 28px;
    font-weight: 400;
}

.imac h3{
    color: var(--text-color-claro);
    letter-spacing: 0.5px;
}


/* FOOTER */
footer{
    width: 100%;
    height: 44px;
    background-color: rgba(0, 0, 0, .8);
    display: flex;
    justify-content: center;
    align-items: center;
}

footer img{
    width: 16px;
    opacity: .2;
    transition: all .5s;
}

footer:hover img{
    opacity: 1;
}


34) Pagina de Helados:
<body>
     
      <!-- Menu de navegacion -->
     <nav>
          <div class="grid container-center">
               <div class="enlaces">
                    <a href="">Inicio</a>
                    <a href="">Sabores</a>
                    <a href="">Eventos</a>
                    <a href="">Nosotros</a>
               </div>
     
               <div class="sociales">
                    <a href="" class="fab fa-facebook-f"></a>
                    <a href="" class="fab fa-twitter"></a>
                    <a href="" class="fab fa-instagram"></a>
               </div>
          </div>
     </nav>


      <!-- Header -->
     <header>    
          <div class="grid container-center">
               <div class="text-content full">
                    <h3>#Helados</h3>
                    <h2>Artesanal</h2>
                    <h1>Helado</h1>
                    <button class="btn light">Menú</button> 
               </div>
          </div>
     </header>



     <!-- Section sabores -->
     <section class="sabores">
          <div class="grid">
               <div class="span6 background">
               </div>

               <div class="span6">
                    <div class="text-content lateral">
                         <h1>NUESTROS SABORES</h1>
                         <h3>¡Frescos y sabrosos!</h3>
                         <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nobis enim, deserunt id eum, dignissimos illo assumenda, voluptatum similique repellat praesentium tenetur non sint expedita itaque voluptatem aperiam a ut fugiat!</p>
                         <button class="btn dark">Menú</button>
                    </div>
               </div>
          </div>
     </section>



     <!-- Section Especial-->
     <section class="especial full">
          <div class="text-content full">
               <h2>DISFRUTA</h2>
               <h1>LIBRE DE LACTOSA</h1>
               <button class="btn light">Menú</button>
          </div>
     </section>


     <!-- Section Lugar -->
     <section class="lugar">
          <div class="grid">
               <div class="span6">
                    <div class="text-content lateral">
                         <h1>Nuestro lugar</h1>
                         <h3>¡Helado frente al mar!</h3>
                         <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nobis enim, deserunt id eum, dignissimos illo assumenda, voluptatum similique repellat praesentium tenetur non sint expedita itaque voluptatem aperiam a ut fugiat!</p>
                         <button class="btn dark">Leer más</button>
                    </div>
               </div>

               <div class="span6 background">
               </div>
          </div>
     </section>


     <!-- Section Eventos-->
     <section class="eventos full">
          <div class="text-content full">
               <h2>CATERING & MÁS</h2>
               <h1>eventOs</h1>
               <button class="btn light">Pide un deseo</button>
          </div>
     </section>


     <!-- Section postres -->
     <section class="postres">
          <div class="grid">
               <div class="span6 background">
               </div>

               <div class="span6">
                    <div class="text-content lateral">
                         <h1>POSTRES</h1>
                         <h3>¡Helados y más!</h3>
                         <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nobis enim, deserunt id eum, dignissimos illo assumenda, voluptatum similique repellat praesentium tenetur non sint expedita itaque voluptatem aperiam a ut fugiat!</p>
                         <button class="btn dark">Menú</button>
                    </div>
               </div>
          </div>
     </section>



     <!-- Section Imagen Helado -->
     <section class="helado">
          <img src="img/image8.webp" alt="">
     </section>


      <!-- Footer -->
     <footer>
          <div class="grid container-center">

               <div class="items">
                    <h2>Direccion</h2>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Animi dolore saepe fugit quod maxime corrupti eligendi explicabo facere facilis hic, laborum expedita a. Vitae, eveniet esse maiores tempore officiis et.</p>
               </div>

               <div class="items">
                    <h2>Enlaces</h2>
                    <ul>
                         <li><a href="">Helados</a></li>
                         <li><a href="">Tortas</a></li>
                         <li><a href="">Dulces</a></li>
                         <li><a href="">Postres</a></li>
                         <li><a href="">Sobre nosotros</a></li>
                         <li><a href="">Contactanos</a></li>
                         <li><a href="">Nuestro menú</a></li>
                         <li><a href="">Delivery y envíos</a></li>
                         <li><a href="">Empleos</a></li>
                    </ul>
               </div>

               <div class="items">
                    <h2>Horario</h2>
                    <p>Todos los dias <br>10AM - 8PM</p>
               </div>

               <div class="items">
                    <div>
                         <h2>Contacto</h2>
                         <p>info@misitio.com <br>Tel: 914-123-456</p>
                    </div>
                    
                    <div class="sociales">
                         <a href="" class="fab fa-facebook-f"></a>
                         <a href="" class="fab fa-twitter"></a>
                         <a href="" class="fab fa-instagram"></a>
                    </div>
               </div>


               <div class="items subs">
                    <h2>Subscribete</h2>
                    <input type="text" placeholder="Ingrese su email">
                    <button class="btn dark">Enviar</button>
               </div>

          </div>
     </footer>


     <!-- Footer copy -->
     <div class="copy">
          <p>© 2021. All Rights Reserved</p>
     </div>
</body>

@import url(https://fonts.googleapis.com/css?family=Teko:300,regular,500,600,700);
@import url(https://fonts.googleapis.com/css?family=Dancing+Script:regular,500,600,700);

/* VARIABLES */
:root{
    --font-principal: 'Teko';
    --font-cursiva: 'Dancing Script';
    --gris600: #2f2e2e;
    --gris200: #706d6d;
}

/* SCROLLBAR */
body::-webkit-scrollbar{
    width: 8px;
}

body::-webkit-scrollbar-thumb{
    background-color: #f7ca37;
    border-radius: 50px;
}

/* GENERALES */
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, Helvetica, sans-serif;
    color: var(--gris600);
    caret-color: transparent;
}

a{
    text-decoration: none;
}

h1, h2{
    font-family: var(--font-principal);
}

h3{
    font-family: var(--font-cursiva);
}

.background{
    background-size: cover !important;
    background-position: right !important;
}

.btn{
    background-color: transparent;
    width: 130px;
    height: 42px;
    font-size: 20px;
    text-transform: uppercase;
    cursor: pointer;
    transition: all .5s;
}

.btn.light{
    color: #FFF;
    border: 2px solid #FFF;    
}

.btn.dark{
    color: var(--gris600);
    border: 2px solid var(--gris600);    
}

.btn:hover{
    background-color: var(--gris600);
    border: 2px solid var(--gris600);
    color: #FFF;
}


/* TEXT CONTENT  */
.text-content{
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    z-index: 1;
}

/*? FULL  */
.text-content.full{
    grid-column: span 12;
}

.text-content.full h1,
.text-content.full h2{
    color: #FFF;
    text-transform: uppercase;
    text-align: center;
}

.text-content.full h1{
    font-size: 115px;
    letter-spacing: 20px;
    line-height: 1.5;
    font-family: Arial, Helvetica, sans-serif;
}

.text-content.full h2{
    font-size: 50px;
    letter-spacing: 2px;
    font-weight: 100;
    line-height: .1;
}

/*? Lateral  */
.text-content.lateral{
    padding: 0 50px;
}

.text-content.lateral h1{
    font-size: 55px;
    font-weight: 400;
    letter-spacing: 2px;
    line-height: 1;
    text-align: center;
}

.text-content.lateral h3{
    font-size: 40px;
    font-weight: 600;
    text-align: center;
}

.text-content.lateral p{
    font-size: 20px;
    margin: 20px 0;
    text-align: center;
    letter-spacing: 0.5px;
}

/* GRID */
.grid{
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    /* Creara automaticamente las filas segun el contenido */
    grid-template-rows: auto;

    /* Mis container Grid tendra el mismo alto del padre */
    height: 100%;
}

.container-center{
    width: 85%;
    margin: 0 auto;
}

.span6{
    grid-column: span 6;
}

/* SECCIONES */
section{
    position: relative;
    width: 100%;
    height: 100vh;
}

section.full::before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-attachment: fixed !important;
    background-position: center !important;
}



/* MENU DE NAVEGACION */
nav{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 50px;
    background: rgba(249, 219, 121, 0.745);
    z-index: 3;
}

nav .grid{
    justify-items: start;
    align-items: center;
}

nav .enlaces{
    grid-column: span 10;
    display: flex;
    justify-content: center;
    align-items: center;
}

nav .enlaces a{
    margin-right: 20px;
    font-family: var(--font-principal);
    font-size: 20px;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: all .5s;
}

nav .enlaces a:hover{
    color: var(--gris200);
}

/*? Sociales  */
.sociales{
    grid-column: span 2;
    display: flex;
    justify-content: flex-end;
    /* Esto me permite decirle al contenedor que ocupe todo el ancho disponible y poder usar flex-end correctamente */
    width: 100%;
}

.sociales a{
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background-color: #000;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
}


/* HEADER */
header{
    position: relative;
    width: 100%;
    height: calc(100vh + 50px);
    background: #f9db79;
    
}

header::before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url(img/image1.webp);
    background-position: center;
    background-repeat: no-repeat;
}

header .grid{
    justify-items: center;
    align-items: center;
}

header .text-content{
    padding: 200px 0 0 0;
}

header .text-content h3{
    position: absolute;
    bottom: 50px;
    right: 0;
    font-size: 50px;
    font-weight: 700;
    color: #000;
}


/* SABORES */
.sabores div.background{
    background: url(img/image2.webp);
}


/* ESPECIAL */
.especial{
    background: #b5e8d5;
}

.especial::before{
    background: url(img/image3.webp);
}



/* LUGAR */
.lugar div.background{
    background: url(img/image4.webp);
}


/* EVENTOS */
.eventos{
    background: #ffbfb3;
}

.eventos::before{
    background: url(img/image5.webp);
}

.eventos .btn{
    width: 200px;
}


/* POSTRES */
.postres div.background{
    background: url(img/image6.webp);
}


/* BANNER DE IMAGENES */
.helado{
    height: 115vh;
    width: 100%;
    background: url(img/image7.webp), #b5e8d5;
    background-attachment: fixed;

    /* Gracias al FLEX mi contendor crecera de alto para contener a la img */
    display: flex;
}

.helado img{
    width: 100%;
    object-fit: cover;
}


/* FOOTER */
footer{
    width: 100%;
    height: 400px;
}

/* Sobrescribo la instruccion de grid de 12cols por 5cols */
footer .grid{
    grid-template-columns: repeat(5, 1fr);
    gap: 20px;
    justify-items: center;
    align-content: center;
}

footer h2{
    font-size: 28px;
    font-weight: 400;
    text-transform: uppercase;
}

footer p,
footer ul, 
footer input{
    margin: 10px 0;
}

footer ul{
    list-style: none;
}

footer ul li a:hover{
    text-decoration: underline;
}

footer input{
    width: 100%;
    height: 40px;
    padding: 0 20px;
}

footer input::placeholder{
    letter-spacing: 1px;
    color: var(--gris600);
}

footer .btn{
    width: 100%;
}

footer .sociales{
    justify-content: flex-start;
}

div.copy{
    width: 100%;
    height: 35px;
    background-color: #000;

    /* Tendra una unica columna que ocupara todo el ancho */
    display: grid;
    grid-template-columns: 100%;
    justify-items: center;
    align-content: center;
}

div.copy p{
    color: rgba(255, 255, 255, .5);
    font-size: 15px;
    font-weight: 600;
}



35) Galeria FlexBox Responsive:
<body>
      <div class="row">
          <div class="column">
               <img src="img/bg1.jpg" alt="">
               <img src="img/bg2.jpg" alt="">
               <img src="img/bg3.jpg" alt="">
               <img src="img/bg4.jpg" alt="">
               <img src="img/bg5.jpeg" alt="">
          </div>

          <div class="column">
               <img src="img/bg6.jpg" alt="">
               <img src="img/bg7.jpg" alt="">
               <img src="img/bg1.jpg" alt="">
               <img src="img/bg2.jpg" alt="">
               <img src="img/bg3.jpg" alt="">
          </div>

          <div class="column">
               <img src="img/bg4.jpg" alt="">
               <img src="img/bg5.jpg" alt="">
               <img src="img/bg6.jpg" alt="">
               <img src="img/bg7.jpg" alt="">
               <img src="img/bg1.jpg" alt="">
          </div>

          <div class="column">
               <img src="img/bg2.jpg" alt="">
               <img src="img/bg3.jpg" alt="">
               <img src="img/bg4.jpg" alt="">
               <img src="img/bg5.jpg" alt="">
               <img src="img/bg6.jpg" alt="">
          </div>
     </div>
</body>

img{
    width: 100%;
    margin-top: 15px;
}

.row{
    display: flex;
    padding: 5px;
    flex-wrap: wrap;
}

.column{
    flex: 25%;
    padding: 5px;
}

/* Con esto hago que segun el ancho le digo el porcentaje que ocupara cada una de mis columnas de flex */
@media screen and (max-width: 800px) {
    .column{
        flex: 50%;
    }
}

@media screen and (max-width: 400px) {
    .column{
        flex: 100%;
    }
}


36) Galeria Grid Responsive:
.grid-container{
    width: 100%;
    padding: 5px;
    display: grid;
    gap: 5px;
    /* GRACIAS A AUTO-FILL PUEDO TRABAJAR CON UN GRID RESPONSIVE */
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));

    /* La primera prop define el tamaño de las filas explicitas y el segundo de las implicitas */
    grid-template-rows: repeat(3, 210px);
    grid-auto-rows: 210px;

    /* Esto permitira manipular el Grid implicito, rellenando espacios vacios con DENSE */
    grid-auto-flow: dense;
}


/* MEDIA QUERY */
@media screen and (min-width: 1530px) {
    .grid-container{
        /* Configura automaticamente la cantidad de filas */
        grid-template-rows: auto;
    }
    
    .item:nth-child(6),
    .item:nth-child(7){
        /* Borro el SPAN 2 */
        grid-column: auto !important;
    }
}


@media screen and (max-width: 1224px) and (min-width: 920px) {
    .item:nth-child(7){
        grid-column: auto !important;
        grid-row: span 2 !important;
    }
}

37) Profesional Cards Responsive:
<body>
     <div class="container">
          <div class="item">
               <div class="img">
                    <img src="img/image1.jpg" alt="">
               </div>
               <div class="content">
                    <h2>Nombre de persona</h2>
                    <p>Programación</p>
               </div>
          </div>

          <div class="item">
               <div class="img">
                    <img src="img/image2.jpg" alt="">
               </div>
               <div class="content">
                    <h2>Nombre de persona</h2>
                    <p>Fotografía</p>
               </div>
          </div>

          <div class="item">
               <div class="img">
                    <img src="img/image3.jpg" alt="">
               </div>
               <div class="content">
                    <h2>Nombre de persona</h2>
                    <p>Modelaje</p>
               </div>
          </div>
     </div>
</body>

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

body{
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: #010615;
}

.container{
    width: 1200px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
}

.item{
    position: relative;
    width: 300px;
    height: 300px;
    display: flex;
    margin: 40px;
}

.img{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    transition: all .5s;
}

.img img{
    width: 100%;
    height: 100%;
    object-fit: cover;
}


.content{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #eee;
    transition: all .5s;

    display: flex;
    justify-content: flex-end;
    align-items: center;
    flex-direction: column;
    padding: 15px;
}

.content h2, 
.content p{
    font-weight: 500;
    line-height: 20px;
    letter-spacing: 1px;
}

.content h2{
    font-size: 20px;
    color: #111;
}

.content p{
    font-size: 14px;
    color: #555;
}

.item:hover .img{
    transform: translate(-35px, -35px);
}

.item:hover .content{
    transform: translate(35px, 35px);
}

@media screen and (max-width: 700px){
    .item:hover .img{
        transform: translate(0, -35px);
    }

    .item:hover .content{
        transform: translate(0, 35px);
    }
}


38) Google Masonery Responsive:

/* Style Original del Contenedor */
.grid-container{
    height: 100vh;
    padding: 10px;
    display: grid;
    gap: 10px;

    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: auto;
    grid-template-areas: 'gmail gmail google drive'
                         'translate maps google youtube'
                         'translate apps apps apps'
}

@media screen and (max-width: 768px){
    .grid-container{
        grid-template-columns:  repeat(2, 1fr);
        grid-template-areas:    'apps apps'
                                'gmail google'
                                'drive translate'
                                'maps youtube'
    }
}

@media screen and (max-width: 500px){
    .grid-container{
        grid-template-columns:  repeat(1, 1fr);
        grid-template-areas:    'apps'
                                'gmail'
                                'google'
                                'drive'
                                'translate'
                                'maps'
                                'youtube'
    }
}


39) Restaurante:

// STYLE.scss

// GENERALES
@import "general/fonts";
@import "general/reset";
@import "general/mixin";
@import "general/variables";
@import "general/generales";
@import "general/mediaq";

// COMPONENTES
@import "general/componentes";

// LAYAOUT
@import "layaout/nav";
@import "layaout/header";
@import "layaout/about";
@import "layaout/oferta";
@import "layaout/menu";
@import "layaout/footer";



// _FONTS.scss
// FONTS
@import url(https://fonts.googleapis.com/css?family=Poppins:100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic);
@import url(https://fonts.googleapis.com/css?family=Merienda:300,regular,500,600,700,800,900);



// _RESET.scss
// RESET
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}


// _MIXIN.scss
// FLEXBOX
@mixin dflex($justify, $align, $flow){
    display: flex;
    justify-content: $justify;
    align-items: $align;
    flex-flow: $flow;
}

// GRID
@mixin dgrid($column, $row, $gap){
    display: grid;
    grid-template-columns: $column;
    grid-template-rows: $row;
    gap: $gap;
}


// BOTONES
@mixin btn($bg, $text){
    background: $bg;
    color: $text;
}


// ICONS
@mixin icons($container, $width, $heigth){
    width: $container;

        a{
            width: $width;
            height: $heigth;
        }
}


// _VARIABLES.scss
// VARIABLES
$white: #fff;
$gris100: #dedede;
$gris200: #ccc;
$gris300: #999;
$gris400: #666;
$gris600: #444;
$gris700: #222;
$black: #000;
$color-primario: #FF7B00;
$color-primario-dark: darken($color-primario, 10); // darken() es una funcion que recibe un color y un valor para hacerlo mas oscuro.



// _GENERALES.scss
// GENERALES
body{
    font-family: "Poppins", sans-serif;
}

a{
    text-decoration: none;
}

header, section{
    padding: 100px 0;
}

.box-center{
    width: 80%;
    margin: auto;
}


h1{
    color: $white;
    font-size: 10vmin;
    font-weight: 600;
    letter-spacing: 2px;
    text-transform: uppercase;
    text-align: center;
}

h1.tprincipal{
    font-family: "Merienda";
    font-size: 12vmin;
    font-weight: bold;
}

h2.tsecundario{
    font-size: 4vmin;
    text-align: center;
    color: $white;
    letter-spacing: 6px;
    font-weight: 400;
}

h3{
    margin-bottom: 70px;
    text-transform: uppercase;
    font-size: 35px;
    color: $gris700;
}

h4{
    color: $gris600;
    font-weight: 400;
    font-size: 30px;
    text-transform: uppercase;
}

h5{
    font-size: 20px;
    font-weight: 400;
}


// Paleta de colores de texto gris
@for $i from 1 through 8{
    .text-solid#{$i}{
        color: lighten($gris700, $i * 11%);
    }
}


// Paleta de colores de background gris
@for $i from 1 through 8{
    .bg-solid#{$i}{
        background: lighten($gris700, $i * 1%);
    }
}

.text-primario{
    color: $color-primario;
}

.bg-primario{
    background: $color-primario;
}

.text-center{
    text-align: center;
}

.text-lite{
    font-family: "Merienda";
}

.border{
    border: 1px solid $gris200;
}

.rounded{
    border-radius: 5px;
}

.rounded-semi{
    border-radius: 20px;
}

.rounded-full{
    border-radius: 20px;
}

.line-space{
    line-height: 40px;
}

.margin-bottom{
    margin-bottom: 30px;
}

.margin-top{
    margin-top: 30px;
}

.marginy{
    margin: 30px 0;
}

.marginx{
    margin: 0 30px;
}



// _MEDIAQ.scss
// MEDIA QUERY
$desktop: "max-width: 1100px";
$tablets: "max-width: 790px";
$phone: "max-width: 550px";

@mixin desktop{
    @media screen and (#{$desktop}){
        @content;
    }
}

@mixin tablets{
    @media screen and (#{$tablets}){
        @content;
    }
}

@mixin phone{
    @media screen and (#{$phone}){
        @content;
    }
}

// DESKTOP
@include desktop(){
    // ABOUT
    .about{
        .about__container{
            .content{
                flex: 0 0 100% !important;
                order: 1;
                margin: 50px 0;
            }

            .container_image{
                flex: 0 0 100% !important;
                order: 0;
                margin: 50px 0;

            }
        }
    }

    // ICONS
    .icons{
        width: 100% !important;
    }
}


// TABLETS
@include tablets(){
    // CARDS
    .card{
        width: 45% !important;
    }
}


// Phones
@include phone(){
    // CARDS
    .card{
        width: 100% !important;
    }

    // FOOTER
    .footer{
        .footer__container{
            grid-template-columns: 1fr !important;
        }
    }
}


// _ABOUT.SCSS
.about{
    .about__container{
        @include dflex(space-between, flex-start, row wrap);

        .content{
            flex: 0 0 50%; // Esto sirve cuando tengo 2 elementos flex y quiero que cada uno ocupe el 50% del container

            .icons{
                @include icons(70%, 70px, 70px);
                font-size: 30px;
            }
        }


        .container_image{
            position: relative;
            flex: 0 0 400px;

            &::before{
                content: '';
                position: absolute;
                top: 40px;
                left: -40px;
                width: 100%;
                height: 100%;
                background-color: $color-primario;
                z-index: -1;
            }

            img{
                width: 100%;
                height: 310px;
                object-fit: cover;
                box-shadow: 0 0 10px 2px rgba($color: #000000, $alpha: .2);
                transition: all .5s;

                &:hover{
                    transform: scale(1.1);
                }
            }
        }

    }
}


// _FOOTER.SCSS
.footer{
    .footer__container{
        @include dgrid(1fr 1fr, auto, 20px);
        padding: 50px 0;
        color: $white;

        .info{
            .icons{
                @include icons(60%, 50px, 50px);
            }
        }

        .contact{
            .icons{
                @include icons(40%, 50px, 50px);
                
                a{
                    background: transparent;

                    &:hover{
                        background: transparent;
                    }  
                }
            }
        }
    }
}



// _HEADER.SCSS
.header{
    position: relative;
    @include dflex(center, center, column nowrap);
    width: 100%;
    height: 600px;
    background: url(../../img/image1.jpg);
    background-size: cover;
    background-position: bottom;
    clip-path: polygon(0 0, 100% 0, 100% 80%, 0% 100%);

    &::before{
        @extend .overlay;
    }

    * {
        position: relative;
    }
}



// _MENU.scss
.menu{
    .menu__container{
        @include dflex(space-between, center, row wrap)
    }
}



// _NAV.scss
nav{
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    width: 100%;
    height: 50px;
    background: rgba($color: #FFF, $alpha: .65);
    @include dflex(center, center, row wrap);

    a{
        color: $gris700;
        padding: 0 20px;
        transition: all .3s;

        &:hover{
            color: $color-primario;
        }
    }
}




// _OFERTA.scss
.oferta{
    position: relative;
    @include dflex(center, center, column nowrap);
    width: 100%;
    height: 500px;
    background: url(../../img/image3.jpg);
    background-size: cover;
    background-attachment: fixed;
    background-position: center;

    &::before{
        @extend .overlay;
    }

    *{
        position: relative;
    }
}